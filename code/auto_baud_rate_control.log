KCPSM6 Assembler log file for program 'C:\Users\dawid\Desktop\VHDL\uP\uart6_kc705\uart6_kc705.srcs\sources_1\new\auto_baud_rate_control.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 22 Jan 2022
Assembly timestamp: 14:19:50

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 45F hex
Nominal program memory size: 2K (2048)   address(10:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 1120
Memory locations available: 2976


Assembly listing

 Addr Code                               Instruction

 000                                     ;
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ; Copyright © 2011-2014, Xilinx, Inc.
 000                                     ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 000                                     ; protected under U.S. and international copyright and other intellectual property laws.
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ;
 000                                     ; Disclaimer:
 000                                     ; This disclaimer is not a license and does not grant any rights to the materials
 000                                     ; distributed herewith. Except as otherwise provided in a valid license issued to
 000                                     ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 000                                     ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 000                                     ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 000                                     ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 000                                     ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 000                                     ; (whether in contract or tort, including negligence, or under any other theory
 000                                     ; of liability) for any loss or damage of any kind or nature related to, arising
 000                                     ; under or in connection with these materials, including for any direct, or any
 000                                     ; indirect, special, incidental, or consequential loss or damage (including loss
 000                                     ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 000                                     ; of any action brought by a third party) even if such damage or loss was
 000                                     ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 000                                     ;
 000                                     ; CRITICAL APPLICATIONS
 000                                     ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 000                                     ; application requiring fail-safe performance, such as life-support or safety
 000                                     ; devices or systems, Class III medical devices, nuclear facilities, applications
 000                                     ; related to the deployment of airbags, or any other applications that could lead
 000                                     ; to death, personal injury, or severe property or environmental damage
 000                                     ; (individually and collectively, "Critical Applications"). Customer assumes the
 000                                     ; sole risk and liability of any use of Xilinx products in Critical Applications,
 000                                     ; subject only to applicable laws and regulations governing limitations on product
 000                                     ; liability.
 000                                     ;
 000                                     ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 000                                     ;
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ;
 000                                     ;
 000                                     ;             _  ______ ____  ____  __  __  __
 000                                     ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 000                                     ;            | ' / |   | |_) \___ \| |\/| | '_ \
 000                                     ;            | . \ |___|  __/ ___) | |  | | (_) )
 000                                     ;            |_|\_\____|_|   |____/|_|  |_|\___/
 000                                     ;
 000                                     ;
 000                                     ; KCPSM6 reference design using 'uart_tx6' and 'uart_rx6' macros.
 000                                     ;
 000                                     ; Ken Chapman - Xilinx Ltd
 000                                     ;
 000                                     ; 25th June 2014 - Initial version (based on previous reference designs).
 000                                     ;
 000                                     ;
 000                                     ; INTRODUCTION
 000                                     ;
 000                                     ; This program interacts with the 'uart_tx6' and 'uart_rx6' macros providing some simple
 000                                     ; and examples of UART based communication. More significantly, this program includes
 000                                     ; an initialisation sequence that computes a value that it outputs to a clock division
 000                                     ; circuit defined in 'uart6_kc705.vhd' such that the serial communications takes place at
 000                                     ; a BAUD rate of 115200. This scheme has the potential to make KCPSM6/UART designs easier
 000                                     ; to port to alternative hardware in which different clock frequencies are present.
 000                                     ;
 000                                     ; Once UART communication is established there is a simple example of a timer that the
 000                                     ; user can reset by pressing the 'R' key. As well as being a further example of PSM code
 000                                     ; it also presents a potential to make a KCPSM6 design that can be easily ported to
 000                                     ; hardware in which a different clock frequency is used. KCPSM6 implements software delays
 000                                     ; that are close to real time as it is practical to achieve. Each KCPSM6 instruction takes
 000                                     ; 2 clock cycles to execute so executing an appropriate number of instructions will
 000                                     ; result in a delay of a known duration. In this code, KCPSM6 adjusts the number of
 000                                     ; instructions that need to be executed for the clock frequency specified.
 000                                     ;
 000                                     ; Hint: For a truly accurate timer or real time clock it would be best to implement
 000                                     ;       a timer in hardware an use that to generate interrupts to KCPSM6. An example
 000                                     ;       of a scheme like this is shown in the 'uart6_atlys' reference design which is also
 000                                     ;       included in the KCPSM6 package and described in 'UART6_User_Guide_30Sept14.pdf'.
 000                                     ;
 000                                     ; Please see 'UART6_User_Guide_30Sept14.pdf' for more detailed descriptions of the
 000                                     ; hardware circuit. The 'UART_TX' and 'UART_RX' routines that implement the fundamental
 000                                     ; communication with the UART macros are contained in 'uart_interface_routines.psm' along
 000                                     ; with a set of constants that define the allocation of ports and the signals within them.
 000                                     ; An INCLUDE directive within this file is used to include 'uart_interface_routines.psm'
 000                                     ; during assembly.
 000                                     ;
 000                                     ;
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ; Port definitions
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ;
 000                                     ;
 000                                     ; UART communication (with PicoTerm or similar terminal)
 000                                     ; ------------------------------------------------------
 000                                     ;
 000                                     ; See 'uart_interface_routines.psm' for I/O ports used with UART macros.
 000                                     ;
 000                                     ;
 000                                     ; Frequency Constant Port
 000                                     ; -----------------------
 000                                     ;
 000                                     ; The initialisation code contained in this program will read this port to discover the
 000                                     ; clock frequency that the user has declared is being applied to KCPSM6 and the UART
 000                                     ; macros. This code will compute values which will define a UART communication BAUD
 000                                     ; rate of 115200 and reasonably accurate real time internal software delays.
 000                                     ;
 000                                     CONSTANT clock_frequency_in_MHz_port, 02
 000                                     ;
 000                                     ;
 000                                     ; UART BAUD rate setting
 000                                     ; ----------------------
 000                                     ;
 000                                     ; The initialisation code contained in this program computes a value that will be applied
 000                                     ; to a clock division circuit so that the UART communication occur at the desired BAUD
 000                                     ; rate. In this example the BAUD rate is set to 115200. See 'UART baud rate' section of
 000                                     ; 'uart6_kc705.vhd' for details of the clock division circuit.
 000                                     ;
 000                                     CONSTANT set_baud_rate_port, 02
 000                                     ;
 000                                     ;
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ; Special Register usage
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ;
 000                                     ; No registers are given special names in this program.
 000                                     ;
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ; Scratch Pad Memory Locations
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ;
 000                                     ; Software delays are implemented relative to the clock frequency. Once calculated by
 000                                     ; KCPSM6, the following locations will hold values defining the number of iterations
 000                                     ; of software delay loops required to yield delays of 1us and 1ms.
 000                                     ;
 000                                     CONSTANT 1us_delay_count, 3D                    ;8-bit value
 000                                     ;
 000                                     CONSTANT 1ms_delay_count0, 3E                   ;16-bit value
 000                                     CONSTANT 1ms_delay_count1, 3F
 000                                     ;
 000                                     ;
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ; Useful data constants
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ;
 000                                     ;
 000                                     ;
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ; Code to skip over address location 003 to avoid corruption caused by 'Hardware
 000                                     ; Session' following configuration.
 000                                     ;------------------------------------------------------------------------------------------
 000                                     ;
 000  22004                              JUMP 004[cold_start]                            ;Avoid address 003 on start up
 001  22004                              JUMP 004[cold_start]
 002  22004                              JUMP 004[cold_start]
 003  22004                              JUMP 004[cold_start]                            ;Address 003
 004                                     ;
 004                         cold_start: 
 004                                     ;
 004                                     ;------------------------------------------------------------------------------------------
 004                                     ; Initialise UART - Setting BAUD Rate
 004                                     ;------------------------------------------------------------------------------------------
 004                                     ;
 004                                     ; This reference design - In 'uart6_kc705.vhd' an integer constant has been defined and
 004                                     ;                         set to '200' to reflect the 200MHz clock used on the KC705 board.
 004                                     ;                         This constant value is then read by KCPSM6 via an input port
 004                                     ;                         which has been defined as port 02 in the hardware and assigned
 004                                     ;                         to 'clock_frequency_in_MHz_port' by a CONSTANT directive above.
 004                                     ;                         The following code and descriptions define and set the BAUD rate
 004                                     ;                         so that UART communication can begin. Purely for development and
 004                                     ;                         experimental purposes this initialisation code is more or less
 004                                     ;                         repeated when it is then possible to display the values being
 004                                     ;                         calculated. A real design would only need the initialisation
 004                                     ;                         code contained in this section.
 004                                     ;
 004                                     ; An 8-bit value is read from the 'clock_frequency_in_MHz_port' to observe the clock
 004                                     ; frequency (in MHz) value defined in the hardware design. This is used to compute a
 004                                     ; a clock division value that is output to the 'set_baud_rate_port' so that UART
 004                                     ; communication occurs at a BAUD rate of 115200 (i.e. the default rate of PicoTerm).
 004                                     ; This enables this reference design to be easily ported to hardware in which a
 004                                     ; different clock frequency is used. This code could also be modified to define
 004                                     ; different BAUD rates.
 004                                     ;
 004                                     ; The hardware circuit effectively divides the clock in order to generate pulses that
 004                                     ; are applied to the 'en_16_x_baud' input of the UART macros. The pulse rate needs to
 004                                     ; be 16 times the desired baud rate. In this case the target baud rate is 115200 so the
 004                                     ; target pulse rate is 1,843,200Hz. The hardware circuit is formed of a simple 8-bit
 004                                     ; counter which increments every clock cycle. When the counter reaches the value that
 004                                     ; KCPSM6 has set on 'set_baud_rate_port' the counter is reset and an 'en_16_x_baud' pulse
 004                                     ; is generated. Therefore, the value of KCPSM6 needs to compute and output to
 004                                     ; 'set_baud_rate_port' is fundamentally the clock frequency (in Hz) divided by 1,843,200.
 004                                     ;
 004  09002                              INPUT s0, 02[clock_frequency_in_MHz_port]       ;read clock frequency value (MHz)
 005                                     ;
 005                                     ; Convert the frequency value in MHz to an absolute frequency value in Hz. The highest
 005                                     ; frequency value that can be read from the input port is '255' so the largest value that
 005                                     ; needs to be represented is 255,000,000 = 0F32FDC0 hex and requires 32-bits. The simple
 005                                     ; way to compute the Hz value is to repeatedly add 1,000,000 (0F4240 hex) to an
 005                                     ; accumulated total. This avoids the need for a full multiplication routine and the time
 005                                     ; taken to execute will not be significant because of the limited range of MHz frequency
 005                                     ; values that can be read from the input port. Besides, it is useful to have some delay
 005                                     ; at the start of a program as this gives time for signals to stabilise before the real
 005                                     ; actions begins.
 005                                     ;
 005  01F00                              LOAD sF, 00                                     ;clear 32-bit accumulator [sF,sE,sD,sC]
 006  01E00                              LOAD sE, 00
 007  01D00                              LOAD sD, 00
 008  01C00                              LOAD sC, 00
 009                                     ;
 009  11C40            clock_to_Hz_loop: ADD sC, 40                                      ;add 1,000,000 to accumulator
 00A  13D42                              ADDCY sD, 42
 00B  13E0F                              ADDCY sE, 0F
 00C  13F00                              ADDCY sF, 00
 00D  19001                              SUB s0, 01[1'd]                                 ;decrement MHz to go
 00E  36009                              JUMP NZ, 009[clock_to_Hz_loop]
 00F                                     ;
 00F                                     ; The easiest way to implement the division of the clock frequency by the 'en_16_x_baud'
 00F                                     ; target pulse rate is simply to count the number of times that 1,843,200Hz (1C2000 hex)
 00F                                     ; can be subtracted from the frequency value [sF,sE,sD,sC] until it becomes negative. This
 00F                                     ; avoids the need for a full division routine and the time taken to execute will not be
 00F                                     ; significant as there can only be a maximum of 139 subtractions.
 00F                                     ;
 00F                                     ; To improve the accuracy of 'en_16_x_baud' pulse generation, the result of the division
 00F                                     ; is reduced by one. This accounts for the fact that clock division counter also spends
 00F                                     ; one clock cycle in state zero. Rather than actually decrement the result of division,
 00F                                     ; the result 's0' is initialised with -1 (FF hex).
 00F                                     ;
 00F  010FF                              LOAD s0, FF                                     ;initialise for division result
 010                                     ;
 010  11001          set_baud_rate_loop: ADD s0, 01[1'd]                                 ;increment division result
 011  19C00                              SUB sC, 00                                      ;subtract 1,843,200
 012  1BD20                              SUBCY sD, 20
 013  1BE1C                              SUBCY sE, 1C
 014  1BF00                              SUBCY sF, 00
 015  3E010                              JUMP NC, 010[set_baud_rate_loop]
 016                                     ;
 016                                     ; Output the computed value to the clock division circuit.
 016                                     ;
 016  2D002                              OUTPUT s0, 02[set_baud_rate_port]
 017                                     ;
 017                                     ;
 017                                     ;------------------------------------------------------------------------------------------
 017                                     ; Initialise UART - Clear internal FIFO buffers
 017                                     ;------------------------------------------------------------------------------------------
 017                                     ;
 017                                     ; The 'reset_UART_macros' routine is contained in 'uart_interface_routines.psm'.
 017                                     ;
 017  2044F                              CALL 44F[reset_UART_macros]
 018                                     ;
 018                                     ;
 018                                     ;------------------------------------------------------------------------------------------
 018                                     ; Welcome message and version information
 018                                     ;------------------------------------------------------------------------------------------
 018                                     ;
 018                                     ; The BAUD rate of the UART macros has been defined so communication with a PC terminal
 018                                     ; (such as PicoTerm supplied in the KCPSM6 package) should now be possible. The welcome
 018                                     ; messages are relatively long text strings so any issues with BAUD rate will be revealed
 018                                     ; (e.g. display of corrupted characters occurs when BAUD rate is too far away from the
 018                                     ; target rate).
 018                                     ;
 018  202C6                              CALL 2C6[clear_screen]
 019  202D6                              CALL 2D6[welcome_message]
 01A                                     ;
 01A                                     ;
 01A                                     ;------------------------------------------------------------------------------------------
 01A                                     ; Development and Experimental Code - Setting BAUD Rate for UART communication
 01A                                     ;------------------------------------------------------------------------------------------
 01A                                     ;
 01A                                     ; As previously described in the 'Initialise UART - Setting BAUD Rate' section the code
 01A                                     ; contained in this section is purely for development and experimental purposes. It
 01A                                     ; repeats the same calculations to derive the value required to define the BAUD rate
 01A                                     ; of UART communication. However, now that UART communication has been established this
 01A                                     ; code can display the values so that you can see them.
 01A                                     ;
 01A                                     ; The 'Initialise UART - Setting BAUD Rate' section contains full descriptions of the
 01A                                     ; calculations so this section only contains brief comments.
 01A                                     ;
 01A                                     ; Suggested experiments
 01A                                     ;
 01A                                     ;    Override the value read from the 'clock_frequency_in_MHz_port' and check that
 01A                                     ;    correct 'set_baud_rate_port' values to define 115220 BAUD at different clock
 01A                                     ;    frequencies are calculated.
 01A                                     ;
 01A                                     ;    Override the value read from the 'clock_frequency_in_MHz_port' to evaluate how
 01A                                     ;    much it can be shifted before UART communication becomes unreliable. For example,
 01A                                     ;    is communication still reliable if the clock is stated to be 190MHz (5% lower than
 01A                                     ;    actually being used in the KC705 reference design).
 01A                                     ;
 01A                                     ;    Modify the code so that it would set the BAUD rate to 57600. Once you have visually
 01A                                     ;    confirmed the computed value is correct you could actually output it to the port and
 01A                                     ;    check that communication takes place at that BAUD rate (e.g. invoke PicoTerm using
 01A                                     ;    'PicoTerm -b57600' as described in 'PicoTerm_README.txt').
 01A                                     ;
 01A                                     ; Display an introductory message and then display the clock frequency value read from
 01A                                     ; 'clock_frequency_in_MHz_port' input port.
 01A                                     ;
 01A  01B00                              LOAD sB, 00[BAUD_intro_msg'upper]               ;Display message
 01B  01A45                              LOAD sA, 45[BAUD_intro_msg'lower]
 01C  20428                              CALL 428[send_message]
 01D                                     ;
 01D  09602                              INPUT s6, 02[clock_frequency_in_MHz_port]       ;Read input port
 01E                                     ;
 01E                                     ; During experiments you can override the value read from the port.
 01E                                     ;
 01E                                     ; LOAD s6, 190'd                          ;e.g. override with 190MHz
 01E                                     ;
 01E  00460                              LOAD s4, s6                                     ;Display MHz frequency value
 01F  2043E                              CALL 43E[send_hex_byte]
 020  20431                              CALL 431[send_Hex_CR]
 021                                     ;
 021                                     ; Convert MHz value to a 32-bit Hz value in [sF,sE,sD,sC].
 021                                     ;
 021  01F00                              LOAD sF, 00                                     ;clear accumulator
 022  01E00                              LOAD sE, 00
 023  01D00                              LOAD sD, 00
 024  01C00                              LOAD sC, 00
 025                                     ;
 025  11C40             clock_freq_loop: ADD sC, 40                                      ;add 1,000,000 (0F4240 hex)
 026  13D42                              ADDCY sD, 42
 027  13E0F                              ADDCY sE, 0F
 028  13F00                              ADDCY sF, 00
 029                                     ;
 029  19601                              SUB s6, 01[1'd]                                 ;repeat for number of MHz
 02A  36025                              JUMP NZ, 025[clock_freq_loop]
 02B                                     ;
 02B                                     ;Display computed Hz value
 02B                                     ;
 02B  01B00                              LOAD sB, 00[BAUD_clock_frequency2_msg'upper]    ;Display message
 02C  01A9F                              LOAD sA, 9F[BAUD_clock_frequency2_msg'lower]
 02D  20428                              CALL 428[send_message]
 02E                                     ;
 02E  004F0                              LOAD s4, sF                                     ;Display Hz frequency value
 02F  2043E                              CALL 43E[send_hex_byte]
 030  004E0                              LOAD s4, sE
 031  2043E                              CALL 43E[send_hex_byte]
 032  004D0                              LOAD s4, sD
 033  2043E                              CALL 43E[send_hex_byte]
 034  004C0                              LOAD s4, sC
 035  2043E                              CALL 43E[send_hex_byte]
 036  20431                              CALL 431[send_Hex_CR]
 037                                     ;
 037                                     ; Divide Hz value by 16 times the target BAUD rate. 16 x 115200 = 1,843,200 (1C2000 hex).
 037                                     ;
 037  016FF                              LOAD s6, FF                                     ;initialise for division result
 038                                     ;
 038  11601              baud_rate_loop: ADD s6, 01[1'd]                                 ;increment result
 039  19C00                              SUB sC, 00                                      ;subtract 1,843,200 (1C2000 hex)
 03A  1BD20                              SUBCY sD, 20
 03B  1BE1C                              SUBCY sE, 1C
 03C  1BF00                              SUBCY sF, 00
 03D  3E038                              JUMP NC, 038[baud_rate_loop]                    ;test for underflow
 03E                                     ;
 03E  01B00                              LOAD sB, 00[BAUD_set_msg'upper]                 ;display baud division value
 03F  01AC2                              LOAD sA, C2[BAUD_set_msg'lower]
 040  20428                              CALL 428[send_message]
 041                                     ;
 041  00460                              LOAD s4, s6                                     ;Display MHz frequency value
 042  2043E                              CALL 43E[send_hex_byte]
 043  20431                              CALL 431[send_Hex_CR]
 044                                     ;
 044                                     ; If you really want to set the BAUD rate then include the following OUTPUT instruction
 044                                     ; to update the value of 'set_baud_rate_port' used by the clock division circuit.
 044                                     ; Obviously if you change the BAUD rate here then communication with the terminal
 044                                     ; could cease until you adjust the terminal's BAUD rate to match.
 044                                     ;
 044                                     ; OUTPUT s6, set_baud_rate_port
 044                                     ;
 044  220F6                              JUMP 0F6[define_soft_delays]
 045                                     ;
 045                                     ;
 045                                     ; Text messages used in this section
 045                                     ;
 045                                     STRING BAUD_introduction$, " Calculation of values used to define the BAUD rate"
 045                                     STRING BAUD_clock_frequency1$, " Declared clock frequency (MHz) = "
 045                                     STRING BAUD_clock_frequency2$, " Converted clock frequency (Hz) = "
 045                                     STRING BAUD_set$, "          'set_baud_rate' value = "
 045                                     ;
 045  2150D              BAUD_intro_msg: LOAD&RETURN s5, 0D[CR]
 046  2150D                              LOAD&RETURN s5, 0D[CR]
 047  21520                              LOAD&RETURN s5, 20[BAUD_introduction$:" "]
 048  21543                              LOAD&RETURN s5, 43[BAUD_introduction$:"C"]
 049  21561                              LOAD&RETURN s5, 61[BAUD_introduction$:"a"]
 04A  2156C                              LOAD&RETURN s5, 6C[BAUD_introduction$:"l"]
 04B  21563                              LOAD&RETURN s5, 63[BAUD_introduction$:"c"]
 04C  21575                              LOAD&RETURN s5, 75[BAUD_introduction$:"u"]
 04D  2156C                              LOAD&RETURN s5, 6C[BAUD_introduction$:"l"]
 04E  21561                              LOAD&RETURN s5, 61[BAUD_introduction$:"a"]
 04F  21574                              LOAD&RETURN s5, 74[BAUD_introduction$:"t"]
 050  21569                              LOAD&RETURN s5, 69[BAUD_introduction$:"i"]
 051  2156F                              LOAD&RETURN s5, 6F[BAUD_introduction$:"o"]
 052  2156E                              LOAD&RETURN s5, 6E[BAUD_introduction$:"n"]
 053  21520                              LOAD&RETURN s5, 20[BAUD_introduction$:" "]
 054  2156F                              LOAD&RETURN s5, 6F[BAUD_introduction$:"o"]
 055  21566                              LOAD&RETURN s5, 66[BAUD_introduction$:"f"]
 056  21520                              LOAD&RETURN s5, 20[BAUD_introduction$:" "]
 057  21576                              LOAD&RETURN s5, 76[BAUD_introduction$:"v"]
 058  21561                              LOAD&RETURN s5, 61[BAUD_introduction$:"a"]
 059  2156C                              LOAD&RETURN s5, 6C[BAUD_introduction$:"l"]
 05A  21575                              LOAD&RETURN s5, 75[BAUD_introduction$:"u"]
 05B  21565                              LOAD&RETURN s5, 65[BAUD_introduction$:"e"]
 05C  21573                              LOAD&RETURN s5, 73[BAUD_introduction$:"s"]
 05D  21520                              LOAD&RETURN s5, 20[BAUD_introduction$:" "]
 05E  21575                              LOAD&RETURN s5, 75[BAUD_introduction$:"u"]
 05F  21573                              LOAD&RETURN s5, 73[BAUD_introduction$:"s"]
 060  21565                              LOAD&RETURN s5, 65[BAUD_introduction$:"e"]
 061  21564                              LOAD&RETURN s5, 64[BAUD_introduction$:"d"]
 062  21520                              LOAD&RETURN s5, 20[BAUD_introduction$:" "]
 063  21574                              LOAD&RETURN s5, 74[BAUD_introduction$:"t"]
 064  2156F                              LOAD&RETURN s5, 6F[BAUD_introduction$:"o"]
 065  21520                              LOAD&RETURN s5, 20[BAUD_introduction$:" "]
 066  21564                              LOAD&RETURN s5, 64[BAUD_introduction$:"d"]
 067  21565                              LOAD&RETURN s5, 65[BAUD_introduction$:"e"]
 068  21566                              LOAD&RETURN s5, 66[BAUD_introduction$:"f"]
 069  21569                              LOAD&RETURN s5, 69[BAUD_introduction$:"i"]
 06A  2156E                              LOAD&RETURN s5, 6E[BAUD_introduction$:"n"]
 06B  21565                              LOAD&RETURN s5, 65[BAUD_introduction$:"e"]
 06C  21520                              LOAD&RETURN s5, 20[BAUD_introduction$:" "]
 06D  21574                              LOAD&RETURN s5, 74[BAUD_introduction$:"t"]
 06E  21568                              LOAD&RETURN s5, 68[BAUD_introduction$:"h"]
 06F  21565                              LOAD&RETURN s5, 65[BAUD_introduction$:"e"]
 070  21520                              LOAD&RETURN s5, 20[BAUD_introduction$:" "]
 071  21542                              LOAD&RETURN s5, 42[BAUD_introduction$:"B"]
 072  21541                              LOAD&RETURN s5, 41[BAUD_introduction$:"A"]
 073  21555                              LOAD&RETURN s5, 55[BAUD_introduction$:"U"]
 074  21544                              LOAD&RETURN s5, 44[BAUD_introduction$:"D"]
 075  21520                              LOAD&RETURN s5, 20[BAUD_introduction$:" "]
 076  21572                              LOAD&RETURN s5, 72[BAUD_introduction$:"r"]
 077  21561                              LOAD&RETURN s5, 61[BAUD_introduction$:"a"]
 078  21574                              LOAD&RETURN s5, 74[BAUD_introduction$:"t"]
 079  21565                              LOAD&RETURN s5, 65[BAUD_introduction$:"e"]
 07A  2150D                              LOAD&RETURN s5, 0D[CR]
 07B  2150D                              LOAD&RETURN s5, 0D[CR]
 07C  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency1$:" "]
 07D  21544                              LOAD&RETURN s5, 44[BAUD_clock_frequency1$:"D"]
 07E  21565                              LOAD&RETURN s5, 65[BAUD_clock_frequency1$:"e"]
 07F  21563                              LOAD&RETURN s5, 63[BAUD_clock_frequency1$:"c"]
 080  2156C                              LOAD&RETURN s5, 6C[BAUD_clock_frequency1$:"l"]
 081  21561                              LOAD&RETURN s5, 61[BAUD_clock_frequency1$:"a"]
 082  21572                              LOAD&RETURN s5, 72[BAUD_clock_frequency1$:"r"]
 083  21565                              LOAD&RETURN s5, 65[BAUD_clock_frequency1$:"e"]
 084  21564                              LOAD&RETURN s5, 64[BAUD_clock_frequency1$:"d"]
 085  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency1$:" "]
 086  21563                              LOAD&RETURN s5, 63[BAUD_clock_frequency1$:"c"]
 087  2156C                              LOAD&RETURN s5, 6C[BAUD_clock_frequency1$:"l"]
 088  2156F                              LOAD&RETURN s5, 6F[BAUD_clock_frequency1$:"o"]
 089  21563                              LOAD&RETURN s5, 63[BAUD_clock_frequency1$:"c"]
 08A  2156B                              LOAD&RETURN s5, 6B[BAUD_clock_frequency1$:"k"]
 08B  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency1$:" "]
 08C  21566                              LOAD&RETURN s5, 66[BAUD_clock_frequency1$:"f"]
 08D  21572                              LOAD&RETURN s5, 72[BAUD_clock_frequency1$:"r"]
 08E  21565                              LOAD&RETURN s5, 65[BAUD_clock_frequency1$:"e"]
 08F  21571                              LOAD&RETURN s5, 71[BAUD_clock_frequency1$:"q"]
 090  21575                              LOAD&RETURN s5, 75[BAUD_clock_frequency1$:"u"]
 091  21565                              LOAD&RETURN s5, 65[BAUD_clock_frequency1$:"e"]
 092  2156E                              LOAD&RETURN s5, 6E[BAUD_clock_frequency1$:"n"]
 093  21563                              LOAD&RETURN s5, 63[BAUD_clock_frequency1$:"c"]
 094  21579                              LOAD&RETURN s5, 79[BAUD_clock_frequency1$:"y"]
 095  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency1$:" "]
 096  21528                              LOAD&RETURN s5, 28[BAUD_clock_frequency1$:"("]
 097  2154D                              LOAD&RETURN s5, 4D[BAUD_clock_frequency1$:"M"]
 098  21548                              LOAD&RETURN s5, 48[BAUD_clock_frequency1$:"H"]
 099  2157A                              LOAD&RETURN s5, 7A[BAUD_clock_frequency1$:"z"]
 09A  21529                              LOAD&RETURN s5, 29[BAUD_clock_frequency1$:")"]
 09B  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency1$:" "]
 09C  2153D                              LOAD&RETURN s5, 3D[BAUD_clock_frequency1$:"="]
 09D  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency1$:" "]
 09E  21500                              LOAD&RETURN s5, 00[NUL]
 09F                                     ;
 09F  21520   BAUD_clock_frequency2_msg: LOAD&RETURN s5, 20[BAUD_clock_frequency2$:" "]
 0A0  21543                              LOAD&RETURN s5, 43[BAUD_clock_frequency2$:"C"]
 0A1  2156F                              LOAD&RETURN s5, 6F[BAUD_clock_frequency2$:"o"]
 0A2  2156E                              LOAD&RETURN s5, 6E[BAUD_clock_frequency2$:"n"]
 0A3  21576                              LOAD&RETURN s5, 76[BAUD_clock_frequency2$:"v"]
 0A4  21565                              LOAD&RETURN s5, 65[BAUD_clock_frequency2$:"e"]
 0A5  21572                              LOAD&RETURN s5, 72[BAUD_clock_frequency2$:"r"]
 0A6  21574                              LOAD&RETURN s5, 74[BAUD_clock_frequency2$:"t"]
 0A7  21565                              LOAD&RETURN s5, 65[BAUD_clock_frequency2$:"e"]
 0A8  21564                              LOAD&RETURN s5, 64[BAUD_clock_frequency2$:"d"]
 0A9  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency2$:" "]
 0AA  21563                              LOAD&RETURN s5, 63[BAUD_clock_frequency2$:"c"]
 0AB  2156C                              LOAD&RETURN s5, 6C[BAUD_clock_frequency2$:"l"]
 0AC  2156F                              LOAD&RETURN s5, 6F[BAUD_clock_frequency2$:"o"]
 0AD  21563                              LOAD&RETURN s5, 63[BAUD_clock_frequency2$:"c"]
 0AE  2156B                              LOAD&RETURN s5, 6B[BAUD_clock_frequency2$:"k"]
 0AF  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency2$:" "]
 0B0  21566                              LOAD&RETURN s5, 66[BAUD_clock_frequency2$:"f"]
 0B1  21572                              LOAD&RETURN s5, 72[BAUD_clock_frequency2$:"r"]
 0B2  21565                              LOAD&RETURN s5, 65[BAUD_clock_frequency2$:"e"]
 0B3  21571                              LOAD&RETURN s5, 71[BAUD_clock_frequency2$:"q"]
 0B4  21575                              LOAD&RETURN s5, 75[BAUD_clock_frequency2$:"u"]
 0B5  21565                              LOAD&RETURN s5, 65[BAUD_clock_frequency2$:"e"]
 0B6  2156E                              LOAD&RETURN s5, 6E[BAUD_clock_frequency2$:"n"]
 0B7  21563                              LOAD&RETURN s5, 63[BAUD_clock_frequency2$:"c"]
 0B8  21579                              LOAD&RETURN s5, 79[BAUD_clock_frequency2$:"y"]
 0B9  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency2$:" "]
 0BA  21528                              LOAD&RETURN s5, 28[BAUD_clock_frequency2$:"("]
 0BB  21548                              LOAD&RETURN s5, 48[BAUD_clock_frequency2$:"H"]
 0BC  2157A                              LOAD&RETURN s5, 7A[BAUD_clock_frequency2$:"z"]
 0BD  21529                              LOAD&RETURN s5, 29[BAUD_clock_frequency2$:")"]
 0BE  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency2$:" "]
 0BF  2153D                              LOAD&RETURN s5, 3D[BAUD_clock_frequency2$:"="]
 0C0  21520                              LOAD&RETURN s5, 20[BAUD_clock_frequency2$:" "]
 0C1  21500                              LOAD&RETURN s5, 00[NUL]
 0C2                                     ;
 0C2  21520                BAUD_set_msg: LOAD&RETURN s5, 20[BAUD_set$:" "]
 0C3  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0C4  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0C5  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0C6  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0C7  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0C8  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0C9  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0CA  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0CB  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0CC  21527                              LOAD&RETURN s5, 27[BAUD_set$:"'"]
 0CD  21573                              LOAD&RETURN s5, 73[BAUD_set$:"s"]
 0CE  21565                              LOAD&RETURN s5, 65[BAUD_set$:"e"]
 0CF  21574                              LOAD&RETURN s5, 74[BAUD_set$:"t"]
 0D0  2155F                              LOAD&RETURN s5, 5F[BAUD_set$:"_"]
 0D1  21562                              LOAD&RETURN s5, 62[BAUD_set$:"b"]
 0D2  21561                              LOAD&RETURN s5, 61[BAUD_set$:"a"]
 0D3  21575                              LOAD&RETURN s5, 75[BAUD_set$:"u"]
 0D4  21564                              LOAD&RETURN s5, 64[BAUD_set$:"d"]
 0D5  2155F                              LOAD&RETURN s5, 5F[BAUD_set$:"_"]
 0D6  21572                              LOAD&RETURN s5, 72[BAUD_set$:"r"]
 0D7  21561                              LOAD&RETURN s5, 61[BAUD_set$:"a"]
 0D8  21574                              LOAD&RETURN s5, 74[BAUD_set$:"t"]
 0D9  21565                              LOAD&RETURN s5, 65[BAUD_set$:"e"]
 0DA  21527                              LOAD&RETURN s5, 27[BAUD_set$:"'"]
 0DB  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0DC  21576                              LOAD&RETURN s5, 76[BAUD_set$:"v"]
 0DD  21561                              LOAD&RETURN s5, 61[BAUD_set$:"a"]
 0DE  2156C                              LOAD&RETURN s5, 6C[BAUD_set$:"l"]
 0DF  21575                              LOAD&RETURN s5, 75[BAUD_set$:"u"]
 0E0  21565                              LOAD&RETURN s5, 65[BAUD_set$:"e"]
 0E1  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0E2  2153D                              LOAD&RETURN s5, 3D[BAUD_set$:"="]
 0E3  21520                              LOAD&RETURN s5, 20[BAUD_set$:" "]
 0E4  21500                              LOAD&RETURN s5, 00[NUL]
 0E5                                     ;
 0E5                                     ;
 0E5                                     ;------------------------------------------------------------------------------------------
 0E5                                     ; Defining Software Delays for Clock Frequency
 0E5                                     ;------------------------------------------------------------------------------------------
 0E5                                     ;
 0E5                                     ; This section defines delays of 1us and 1ms implemented purely in software. All KCPSM6
 0E5                                     ; instructions take 2 clock cycles to execute so the accuracy of each delay depends on
 0E5                                     ; the total number of instructions executed and the clock frequency supplied to KCSPM6.
 0E5                                     ; The code in this section attempts to implement reasonably accurate delays by calculating
 0E5                                     ; the number or instructions that need to be executed for a declared clock frequency. This
 0E5                                     ; scheme has the potential to make a KCPSM6 design more portable but it also precludes the
 0E5                                     ; opportunity to make 'fine adjustments' to code that would accurately tune a software
 0E5                                     ; delay given a known operating frequency from the outset.
 0E5                                     ;
 0E5                                     ; Note that if an interrupt or 'sleep' mode should occur whilst executing a software delay
 0E5                                     ; routine then the delay will be increased.
 0E5                                     ;
 0E5                                     ; Hint: For a truly accurate and predictable timer or real time clock it would be best
 0E5                                     ;       to implement a timer in hardware an use that to generate interrupts to KCPSM6.
 0E5                                     ;
 0E5                                     ;
 0E5                                     ; This reference design - In 'uart6_kc705.vhd' an integer constant has been defined and
 0E5                                     ;                         set to '200' to reflect the 200MHz clock used on the KC705 board.
 0E5                                     ;                         This constant value is then read by KCPSM6 via an input port
 0E5                                     ;                         which has been defined as port 02 in the hardware and assigned
 0E5                                     ;                         to 'clock_frequency_in_MHz_port' by a CONSTANT directive above.
 0E5                                     ;                         The following code and descriptions define delays close to 1us
 0E5                                     ;                         and 1ms to work with the 'clock_frequency_in_MHz_port' value.
 0E5                                     ;
 0E5                                     ; The 8-bit 'clock_frequency_in_MHz_port' value can declare a maximum clock frequency of
 0E5                                     ; 255MHz. At that maximum frequency a delay of 1us equates to 250 clock cycles which is
 0E5                                     ; the time taken for KCPSM6 to execute 125 instructions. Likewise, 1ms equates to 250,000
 0E5                                     ; clock cycles which is the time taken for KCPSM6 to execute 125,000 instructions. These
 0E5                                     ; maximums help to define the code suitable for the implementation of software delays.
 0E5                                     ; Although it is tempting to say that 1ms is simply 1000 times 1us it is more accurate
 0E5                                     ; to define each delay independently (i.e. avoids the accumulation of a small error in
 0E5                                     ; the 1us becoming significant in a 1ms delay).
 0E5                                     ;
 0E5                                     ; 1us Delay
 0E5                                     ; ---------
 0E5                                     ;
 0E5                                     ; Once calculated by KCPSM6 (see code further below), the value held in '1us_delay_count'
 0E5                                     ; defines the number of iterations of a small software delay loop required to yield a
 0E5                                     ; delay of 1us at the declared clock frequency.
 0E5                                     ;
 0E5                                     ; Register used s0
 0E5                                     ;
 0E5  0B03D                   delay_1us: FETCH s0, 3D[1us_delay_count]
 0E6                                     ;
 0E6                                     ; Each iteration of the 'delay_1us_loop' consists of 2 instructions and will take 4 clock
 0E6                                     ; cycles to execute. Including the FETCH, RETURN and CALL instructions (CALL is used to
 0E6                                     ; invoke this routine in the first place) the total delay will be...
 0E6                                     ;
 0E6                                     ;          ((4 x 1us_delay_count) + 6) clock cycles
 0E6                                     ;
 0E6                                     ; At the maximum clock frequency of 255MHz the ideal value of '1us_delay_count' would be
 0E6                                     ; 61 (3D hex). The minimum value of '1us_delay_count' is 1 and corresponds with a minimum
 0E6                                     ; frequency of 10MHz. Although the delay implemented will always be in the region of 1us
 0E6                                     ; the accuracy will depend on the clock frequency declared. The delay is defined in
 0E6                                     ; increments of 2 instructions (4 clock cycles) so this will be a somewhat course at lower
 0E6                                     ; adjustment frequencies.
 0E6                                     ;
 0E6  19001              delay_1us_loop: SUB s0, 01[1'd]
 0E7  360E6                              JUMP NZ, 0E6[delay_1us_loop]
 0E8  25000                              RETURN 
 0E9                                     ;
 0E9                                     ;
 0E9                                     ; 1ms Delay
 0E9                                     ; ---------
 0E9                                     ;
 0E9                                     ; Once calculated by KCPSM6 (see code further below), the 16-bit value held in
 0E9                                     ; '1ms_delay_count0' and '1ms_delay_count1' define the number of iterations of a small
 0E9                                     ; software delay loop required to yield a delay of 1ms at the declared clock frequency.
 0E9                                     ;
 0E9                                     ; Registers used s0, s1
 0E9                                     ;
 0E9  0B03E                   delay_1ms: FETCH s0, 3E[1ms_delay_count0]
 0EA  0B13F                              FETCH s1, 3F[1ms_delay_count1]
 0EB                                     ;
 0EB                                     ; Each iteration of the 'delay_1ms_loop' consists of 3 instructions and will take 6 clock
 0EB                                     ; cycles to execute. Including the FETCH (x2), RETURN and CALL instruction (CALL used to
 0EB                                     ; invoke this routine in the first place) the total delay will be...
 0EB                                     ;
 0EB                                     ;          ((6 x 1ms_delay_count1]) + 8) clock cycles
 0EB                                     ;
 0EB                                     ; At the maximum clock frequency of 255MHz the ideal value of '1ms_delay_count' would be
 0EB                                     ; 42499 (A603 hex). The lowest clock frequency that can be declared is 1MHz and the ideal
 0EB                                     ; value of '1ms_delay_count' would be 165 (00A5 hex). This indicates that the accuracy of
 0EB                                     ; the delay (i.e. increments of 3 instructions or 6 clock cycles) should not be an issue.
 0EB                                     ;
 0EB  19001              delay_1ms_loop: SUB s0, 01
 0EC  1B100                              SUBCY s1, 00
 0ED  360EB                              JUMP NZ, 0EB[delay_1ms_loop]
 0EE  25000                              RETURN 
 0EF                                     ;
 0EF                                     ;
 0EF                                     ; 1s Delay
 0EF                                     ; ---------
 0EF                                     ;
 0EF                                     ; Other delays can then be formed by multiple calls to the above routines. For example,
 0EF                                     ; a 1 second delay is implemented by calling 'delay_1ms' 1,000 times.
 0EF                                     ;
 0EF  012E8                    delay_1s: LOAD s2, E8                                     ;[s3,s2] = 1000 [03E8 hex]
 0F0  01303                              LOAD s3, 03
 0F1                                     ;
 0F1  200E9                    1s_delay: CALL 0E9[delay_1ms]
 0F2  19201                              SUB s2, 01
 0F3  1B300                              SUBCY s3, 00
 0F4  360F1                              JUMP NZ, 0F1[1s_delay]
 0F5  25000                              RETURN 
 0F6                                     ;
 0F6                                     ;
 0F6                                     ; Calculation of delay iteration count values
 0F6                                     ; -------------------------------------------
 0F6                                     ;
 0F6                                     ; Display an introductory message and then display the clock frequency value read from
 0F6                                     ; 'clock_frequency_in_MHz_port' input port.
 0F6                                     ;
 0F6  01B01          define_soft_delays: LOAD sB, 01[DELAY_intro_msg'upper]              ;Display message
 0F7  01A3B                              LOAD sA, 3B[DELAY_intro_msg'lower]
 0F8  20428                              CALL 428[send_message]
 0F9                                     ;
 0F9  09602                              INPUT s6, 02[clock_frequency_in_MHz_port]       ;Read input port
 0FA                                     ;
 0FA                                     ; During experiments you can override the value read from the port.
 0FA                                     ;
 0FA                                     ; LOAD s6, 255'd                          ;e.g. override with 255MHz
 0FA                                     ;
 0FA  00460                              LOAD s4, s6                                     ;Display MHz frequency value
 0FB  2043E                              CALL 43E[send_hex_byte]
 0FC  20431                              CALL 431[send_Hex_CR]
 0FD                                     ;
 0FD                                     ;
 0FD                                     ; Calculation of the 8-bit '1us_delay_count' value
 0FD                                     ; ------------------------------------------------
 0FD                                     ;
 0FD                                     ; The number of clock cycles for a 1us delay is the same as the frequency in MHz.
 0FD                                     ;
 0FD  01B01                              LOAD sB, 01[DELAY_1us_clock_cycles_msg'upper]   ;Display message
 0FE  01A87                              LOAD sA, 87[DELAY_1us_clock_cycles_msg'lower]
 0FF  20428                              CALL 428[send_message]
 100  00460                              LOAD s4, s6                                     ;Display cycle count required
 101  2043E                              CALL 43E[send_hex_byte]
 102  20431                              CALL 431[send_Hex_CR]
 103                                     ;
 103                                     ; Calculate the required number of iterations of the 'delay_1us_loop'
 103                                     ;
 103  01B01                              LOAD sB, 01[DELAY_set_1us_msg'upper]            ;Display message
 104  01AAA                              LOAD sA, AA[DELAY_set_1us_msg'lower]
 105  20428                              CALL 428[send_message]
 106                                     ;
 106                                     ; For 1us delay calculate the 8-bit value '1us_delay_count'
 106                                     ;
 106                                     ;     clock cycles for 1us delay = ((4 x 1us_delay_count) + 6)
 106                                     ;
 106                                     ;      Hence....
 106                                     ;                1us_delay_count = (clock cycles - 6) / 4
 106                                     ;
 106                                     ; If the frequency in MHz is 10 or less then '1us_delay_count' will be set to the minimum
 106                                     ; value of 1 and the delay implemented will just have to be longer than 1us!
 106                                     ;
 106  1D60B                              COMPARE s6, 0B[11'd]                            ;test for minimum frequency
 107  3E10A                              JUMP NC, 10A[calc_1us_delay_count]
 108  01401                              LOAD s4, 01[1'd]
 109  22110                              JUMP 110[store_1us_delay_count]
 10A                                     ;
 10A  00760        calc_1us_delay_count: LOAD s7, s6                                     ;make a local copy of MHz frequency value
 10B  19706                              SUB s7, 06[6'd]                                 ;(clock cycles - 6)
 10C  01400                              LOAD s4, 00[0'd]                                ;clear division result
 10D  11401             1us_divide_loop: ADD s4, 01[1'd]                                 ;increment division result
 10E  19704                              SUB s7, 04[4'd]                                 ;how many times does 4 into (clock cycles - 6)?
 10F  3E10D                              JUMP NC, 10D[1us_divide_loop]
 110                                     ;
 110  2F43D       store_1us_delay_count: STORE s4, 3D[1us_delay_count]                   ;store result in memory
 111  2043E                              CALL 43E[send_hex_byte]                         ;display value
 112  20431                              CALL 431[send_Hex_CR]
 113                                     ;
 113                                     ;
 113                                     ; Calculation of the 16-bit '1ms_delay_count' value
 113                                     ; -------------------------------------------------
 113                                     ;
 113                                     ; The number of clock cycles for a 1ms delay is the clock frequency in MHz multiplied
 113                                     ; by 1,000. Therefore the highest number of clock cycles for a 1ms delay would be 255,000.
 113                                     ;
 113                                     ; 255,000 = 03E418 hex so registers set [sF,sE,sD] are used to compute this value
 113                                     ;
 113  01F00                              LOAD sF, 00                                     ;clear [sF,sE,sD]
 114  01E00                              LOAD sE, 00
 115  01D00                              LOAD sD, 00
 116  11DE8        1ms_cycle_count_loop: ADD sD, E8                                      ;add 1,000 = 0003e8 hex
 117  13E03                              ADDCY sE, 03
 118  13F00                              ADDCY sF, 00
 119  19601                              SUB s6, 01[1'd]                                 ;decrement MHz value
 11A  36116                              JUMP NZ, 116[1ms_cycle_count_loop]
 11B                                     ;
 11B                                     ;
 11B                                     ;
 11B  01B01                              LOAD sB, 01[DELAY_1ms_clock_cycles_msg'upper]   ;Display message
 11C  01ACD                              LOAD sA, CD[DELAY_1ms_clock_cycles_msg'lower]
 11D  20428                              CALL 428[send_message]
 11E  004F0                              LOAD s4, sF                                     ;Display cycle count required
 11F  2043E                              CALL 43E[send_hex_byte]
 120  004E0                              LOAD s4, sE
 121  2043E                              CALL 43E[send_hex_byte]
 122  004D0                              LOAD s4, sD
 123  2043E                              CALL 43E[send_hex_byte]
 124  20431                              CALL 431[send_Hex_CR]
 125                                     ;
 125                                     ; Calculate the required number of iterations of the 'delay_1us_loop'
 125                                     ;
 125  01B01                              LOAD sB, 01[DELAY_set_1ms_msg'upper]            ;Display message
 126  01AF0                              LOAD sA, F0[DELAY_set_1ms_msg'lower]
 127  20428                              CALL 428[send_message]
 128                                     ;
 128                                     ; For 1ms delay calculate the 16-bit value '1ms_delay_count'
 128                                     ;
 128                                     ;     clock cycles for 1ms delay = ((6 x 1ms_delay_count]) + 8)
 128                                     ;
 128                                     ;      Hence....
 128                                     ;                1ms_delay_count = (clock cycles - 8) / 6
 128                                     ;
 128                                     ; At the maximum clock frequency of 255MHz the value of '1ms_delay_count' will be
 128                                     ; 42499 (A603 hex) which is calculated in [s7,s6] and then stored in scratch pad memory.
 128                                     ;
 128  19D08                              SUB sD, 08                                      ;(clock cycles - 8)
 129  1BE00                              SUBCY sE, 00
 12A  1BF00                              SUBCY sF, 00
 12B  01700                              LOAD s7, 00                                     ;clear division result [s7,s6]
 12C  01600                              LOAD s6, 00
 12D  11601             1ms_divide_loop: ADD s6, 01                                      ;increment division result
 12E  13700                              ADDCY s7, 00
 12F  19D06                              SUB sD, 06                                      ;how many times does 6 into (clock cycles - 8)?
 130  1BE00                              SUBCY sE, 00
 131  1BF00                              SUBCY sF, 00
 132  3E12D                              JUMP NC, 12D[1ms_divide_loop]
 133                                     ;
 133  2F63E                              STORE s6, 3E[1ms_delay_count0]                  ;store result in memory
 134  2F73F                              STORE s7, 3F[1ms_delay_count1]
 135  00470                              LOAD s4, s7                                     ;display value
 136  2043E                              CALL 43E[send_hex_byte]
 137  00460                              LOAD s4, s6
 138  2043E                              CALL 43E[send_hex_byte]
 139  20431                              CALL 431[send_Hex_CR]
 13A                                     ;
 13A  22213                              JUMP 213[main]
 13B                                     ;
 13B                                     ;
 13B                                     ; Text messages used in this section
 13B                                     ;
 13B                                     STRING DELAY_introduction$, " Calculation of software delay values"
 13B                                     STRING DELAY_clock_frequency$, " Declared clock frequency (MHz) = "
 13B                                     STRING DELAY_1us_clock_cycles$, "     Clock cycles for 1us delay = "
 13B                                     STRING DELAY_set_1us$, "        '1us_delay_count' value = "
 13B                                     STRING DELAY_1ms_clock_cycles$, "     Clock cycles for 1ms delay = "
 13B                                     STRING DELAY_set_1ms$, "        '1ms_delay_count' value = "
 13B                                     ;
 13B  2150D             DELAY_intro_msg: LOAD&RETURN s5, 0D[CR]
 13C  2150D                              LOAD&RETURN s5, 0D[CR]
 13D  21520                              LOAD&RETURN s5, 20[DELAY_introduction$:" "]
 13E  21543                              LOAD&RETURN s5, 43[DELAY_introduction$:"C"]
 13F  21561                              LOAD&RETURN s5, 61[DELAY_introduction$:"a"]
 140  2156C                              LOAD&RETURN s5, 6C[DELAY_introduction$:"l"]
 141  21563                              LOAD&RETURN s5, 63[DELAY_introduction$:"c"]
 142  21575                              LOAD&RETURN s5, 75[DELAY_introduction$:"u"]
 143  2156C                              LOAD&RETURN s5, 6C[DELAY_introduction$:"l"]
 144  21561                              LOAD&RETURN s5, 61[DELAY_introduction$:"a"]
 145  21574                              LOAD&RETURN s5, 74[DELAY_introduction$:"t"]
 146  21569                              LOAD&RETURN s5, 69[DELAY_introduction$:"i"]
 147  2156F                              LOAD&RETURN s5, 6F[DELAY_introduction$:"o"]
 148  2156E                              LOAD&RETURN s5, 6E[DELAY_introduction$:"n"]
 149  21520                              LOAD&RETURN s5, 20[DELAY_introduction$:" "]
 14A  2156F                              LOAD&RETURN s5, 6F[DELAY_introduction$:"o"]
 14B  21566                              LOAD&RETURN s5, 66[DELAY_introduction$:"f"]
 14C  21520                              LOAD&RETURN s5, 20[DELAY_introduction$:" "]
 14D  21573                              LOAD&RETURN s5, 73[DELAY_introduction$:"s"]
 14E  2156F                              LOAD&RETURN s5, 6F[DELAY_introduction$:"o"]
 14F  21566                              LOAD&RETURN s5, 66[DELAY_introduction$:"f"]
 150  21574                              LOAD&RETURN s5, 74[DELAY_introduction$:"t"]
 151  21577                              LOAD&RETURN s5, 77[DELAY_introduction$:"w"]
 152  21561                              LOAD&RETURN s5, 61[DELAY_introduction$:"a"]
 153  21572                              LOAD&RETURN s5, 72[DELAY_introduction$:"r"]
 154  21565                              LOAD&RETURN s5, 65[DELAY_introduction$:"e"]
 155  21520                              LOAD&RETURN s5, 20[DELAY_introduction$:" "]
 156  21564                              LOAD&RETURN s5, 64[DELAY_introduction$:"d"]
 157  21565                              LOAD&RETURN s5, 65[DELAY_introduction$:"e"]
 158  2156C                              LOAD&RETURN s5, 6C[DELAY_introduction$:"l"]
 159  21561                              LOAD&RETURN s5, 61[DELAY_introduction$:"a"]
 15A  21579                              LOAD&RETURN s5, 79[DELAY_introduction$:"y"]
 15B  21520                              LOAD&RETURN s5, 20[DELAY_introduction$:" "]
 15C  21576                              LOAD&RETURN s5, 76[DELAY_introduction$:"v"]
 15D  21561                              LOAD&RETURN s5, 61[DELAY_introduction$:"a"]
 15E  2156C                              LOAD&RETURN s5, 6C[DELAY_introduction$:"l"]
 15F  21575                              LOAD&RETURN s5, 75[DELAY_introduction$:"u"]
 160  21565                              LOAD&RETURN s5, 65[DELAY_introduction$:"e"]
 161  21573                              LOAD&RETURN s5, 73[DELAY_introduction$:"s"]
 162  2150D                              LOAD&RETURN s5, 0D[CR]
 163  2150D                              LOAD&RETURN s5, 0D[CR]
 164  21520                              LOAD&RETURN s5, 20[DELAY_clock_frequency$:" "]
 165  21544                              LOAD&RETURN s5, 44[DELAY_clock_frequency$:"D"]
 166  21565                              LOAD&RETURN s5, 65[DELAY_clock_frequency$:"e"]
 167  21563                              LOAD&RETURN s5, 63[DELAY_clock_frequency$:"c"]
 168  2156C                              LOAD&RETURN s5, 6C[DELAY_clock_frequency$:"l"]
 169  21561                              LOAD&RETURN s5, 61[DELAY_clock_frequency$:"a"]
 16A  21572                              LOAD&RETURN s5, 72[DELAY_clock_frequency$:"r"]
 16B  21565                              LOAD&RETURN s5, 65[DELAY_clock_frequency$:"e"]
 16C  21564                              LOAD&RETURN s5, 64[DELAY_clock_frequency$:"d"]
 16D  21520                              LOAD&RETURN s5, 20[DELAY_clock_frequency$:" "]
 16E  21563                              LOAD&RETURN s5, 63[DELAY_clock_frequency$:"c"]
 16F  2156C                              LOAD&RETURN s5, 6C[DELAY_clock_frequency$:"l"]
 170  2156F                              LOAD&RETURN s5, 6F[DELAY_clock_frequency$:"o"]
 171  21563                              LOAD&RETURN s5, 63[DELAY_clock_frequency$:"c"]
 172  2156B                              LOAD&RETURN s5, 6B[DELAY_clock_frequency$:"k"]
 173  21520                              LOAD&RETURN s5, 20[DELAY_clock_frequency$:" "]
 174  21566                              LOAD&RETURN s5, 66[DELAY_clock_frequency$:"f"]
 175  21572                              LOAD&RETURN s5, 72[DELAY_clock_frequency$:"r"]
 176  21565                              LOAD&RETURN s5, 65[DELAY_clock_frequency$:"e"]
 177  21571                              LOAD&RETURN s5, 71[DELAY_clock_frequency$:"q"]
 178  21575                              LOAD&RETURN s5, 75[DELAY_clock_frequency$:"u"]
 179  21565                              LOAD&RETURN s5, 65[DELAY_clock_frequency$:"e"]
 17A  2156E                              LOAD&RETURN s5, 6E[DELAY_clock_frequency$:"n"]
 17B  21563                              LOAD&RETURN s5, 63[DELAY_clock_frequency$:"c"]
 17C  21579                              LOAD&RETURN s5, 79[DELAY_clock_frequency$:"y"]
 17D  21520                              LOAD&RETURN s5, 20[DELAY_clock_frequency$:" "]
 17E  21528                              LOAD&RETURN s5, 28[DELAY_clock_frequency$:"("]
 17F  2154D                              LOAD&RETURN s5, 4D[DELAY_clock_frequency$:"M"]
 180  21548                              LOAD&RETURN s5, 48[DELAY_clock_frequency$:"H"]
 181  2157A                              LOAD&RETURN s5, 7A[DELAY_clock_frequency$:"z"]
 182  21529                              LOAD&RETURN s5, 29[DELAY_clock_frequency$:")"]
 183  21520                              LOAD&RETURN s5, 20[DELAY_clock_frequency$:" "]
 184  2153D                              LOAD&RETURN s5, 3D[DELAY_clock_frequency$:"="]
 185  21520                              LOAD&RETURN s5, 20[DELAY_clock_frequency$:" "]
 186  21500                              LOAD&RETURN s5, 00[NUL]
 187                                     ;
 187  21520  DELAY_1us_clock_cycles_msg: LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 188  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 189  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 18A  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 18B  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 18C  21543                              LOAD&RETURN s5, 43[DELAY_1us_clock_cycles$:"C"]
 18D  2156C                              LOAD&RETURN s5, 6C[DELAY_1us_clock_cycles$:"l"]
 18E  2156F                              LOAD&RETURN s5, 6F[DELAY_1us_clock_cycles$:"o"]
 18F  21563                              LOAD&RETURN s5, 63[DELAY_1us_clock_cycles$:"c"]
 190  2156B                              LOAD&RETURN s5, 6B[DELAY_1us_clock_cycles$:"k"]
 191  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 192  21563                              LOAD&RETURN s5, 63[DELAY_1us_clock_cycles$:"c"]
 193  21579                              LOAD&RETURN s5, 79[DELAY_1us_clock_cycles$:"y"]
 194  21563                              LOAD&RETURN s5, 63[DELAY_1us_clock_cycles$:"c"]
 195  2156C                              LOAD&RETURN s5, 6C[DELAY_1us_clock_cycles$:"l"]
 196  21565                              LOAD&RETURN s5, 65[DELAY_1us_clock_cycles$:"e"]
 197  21573                              LOAD&RETURN s5, 73[DELAY_1us_clock_cycles$:"s"]
 198  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 199  21566                              LOAD&RETURN s5, 66[DELAY_1us_clock_cycles$:"f"]
 19A  2156F                              LOAD&RETURN s5, 6F[DELAY_1us_clock_cycles$:"o"]
 19B  21572                              LOAD&RETURN s5, 72[DELAY_1us_clock_cycles$:"r"]
 19C  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 19D  21531                              LOAD&RETURN s5, 31[DELAY_1us_clock_cycles$:"1"]
 19E  21575                              LOAD&RETURN s5, 75[DELAY_1us_clock_cycles$:"u"]
 19F  21573                              LOAD&RETURN s5, 73[DELAY_1us_clock_cycles$:"s"]
 1A0  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 1A1  21564                              LOAD&RETURN s5, 64[DELAY_1us_clock_cycles$:"d"]
 1A2  21565                              LOAD&RETURN s5, 65[DELAY_1us_clock_cycles$:"e"]
 1A3  2156C                              LOAD&RETURN s5, 6C[DELAY_1us_clock_cycles$:"l"]
 1A4  21561                              LOAD&RETURN s5, 61[DELAY_1us_clock_cycles$:"a"]
 1A5  21579                              LOAD&RETURN s5, 79[DELAY_1us_clock_cycles$:"y"]
 1A6  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 1A7  2153D                              LOAD&RETURN s5, 3D[DELAY_1us_clock_cycles$:"="]
 1A8  21520                              LOAD&RETURN s5, 20[DELAY_1us_clock_cycles$:" "]
 1A9  21500                              LOAD&RETURN s5, 00[NUL]
 1AA                                     ;
 1AA  21520           DELAY_set_1us_msg: LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1AB  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1AC  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1AD  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1AE  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1AF  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1B0  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1B1  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1B2  21527                              LOAD&RETURN s5, 27[DELAY_set_1us$:"'"]
 1B3  21531                              LOAD&RETURN s5, 31[DELAY_set_1us$:"1"]
 1B4  21575                              LOAD&RETURN s5, 75[DELAY_set_1us$:"u"]
 1B5  21573                              LOAD&RETURN s5, 73[DELAY_set_1us$:"s"]
 1B6  2155F                              LOAD&RETURN s5, 5F[DELAY_set_1us$:"_"]
 1B7  21564                              LOAD&RETURN s5, 64[DELAY_set_1us$:"d"]
 1B8  21565                              LOAD&RETURN s5, 65[DELAY_set_1us$:"e"]
 1B9  2156C                              LOAD&RETURN s5, 6C[DELAY_set_1us$:"l"]
 1BA  21561                              LOAD&RETURN s5, 61[DELAY_set_1us$:"a"]
 1BB  21579                              LOAD&RETURN s5, 79[DELAY_set_1us$:"y"]
 1BC  2155F                              LOAD&RETURN s5, 5F[DELAY_set_1us$:"_"]
 1BD  21563                              LOAD&RETURN s5, 63[DELAY_set_1us$:"c"]
 1BE  2156F                              LOAD&RETURN s5, 6F[DELAY_set_1us$:"o"]
 1BF  21575                              LOAD&RETURN s5, 75[DELAY_set_1us$:"u"]
 1C0  2156E                              LOAD&RETURN s5, 6E[DELAY_set_1us$:"n"]
 1C1  21574                              LOAD&RETURN s5, 74[DELAY_set_1us$:"t"]
 1C2  21527                              LOAD&RETURN s5, 27[DELAY_set_1us$:"'"]
 1C3  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1C4  21576                              LOAD&RETURN s5, 76[DELAY_set_1us$:"v"]
 1C5  21561                              LOAD&RETURN s5, 61[DELAY_set_1us$:"a"]
 1C6  2156C                              LOAD&RETURN s5, 6C[DELAY_set_1us$:"l"]
 1C7  21575                              LOAD&RETURN s5, 75[DELAY_set_1us$:"u"]
 1C8  21565                              LOAD&RETURN s5, 65[DELAY_set_1us$:"e"]
 1C9  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1CA  2153D                              LOAD&RETURN s5, 3D[DELAY_set_1us$:"="]
 1CB  21520                              LOAD&RETURN s5, 20[DELAY_set_1us$:" "]
 1CC  21500                              LOAD&RETURN s5, 00[NUL]
 1CD                                     ;
 1CD  21520  DELAY_1ms_clock_cycles_msg: LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1CE  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1CF  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1D0  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1D1  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1D2  21543                              LOAD&RETURN s5, 43[DELAY_1ms_clock_cycles$:"C"]
 1D3  2156C                              LOAD&RETURN s5, 6C[DELAY_1ms_clock_cycles$:"l"]
 1D4  2156F                              LOAD&RETURN s5, 6F[DELAY_1ms_clock_cycles$:"o"]
 1D5  21563                              LOAD&RETURN s5, 63[DELAY_1ms_clock_cycles$:"c"]
 1D6  2156B                              LOAD&RETURN s5, 6B[DELAY_1ms_clock_cycles$:"k"]
 1D7  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1D8  21563                              LOAD&RETURN s5, 63[DELAY_1ms_clock_cycles$:"c"]
 1D9  21579                              LOAD&RETURN s5, 79[DELAY_1ms_clock_cycles$:"y"]
 1DA  21563                              LOAD&RETURN s5, 63[DELAY_1ms_clock_cycles$:"c"]
 1DB  2156C                              LOAD&RETURN s5, 6C[DELAY_1ms_clock_cycles$:"l"]
 1DC  21565                              LOAD&RETURN s5, 65[DELAY_1ms_clock_cycles$:"e"]
 1DD  21573                              LOAD&RETURN s5, 73[DELAY_1ms_clock_cycles$:"s"]
 1DE  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1DF  21566                              LOAD&RETURN s5, 66[DELAY_1ms_clock_cycles$:"f"]
 1E0  2156F                              LOAD&RETURN s5, 6F[DELAY_1ms_clock_cycles$:"o"]
 1E1  21572                              LOAD&RETURN s5, 72[DELAY_1ms_clock_cycles$:"r"]
 1E2  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1E3  21531                              LOAD&RETURN s5, 31[DELAY_1ms_clock_cycles$:"1"]
 1E4  2156D                              LOAD&RETURN s5, 6D[DELAY_1ms_clock_cycles$:"m"]
 1E5  21573                              LOAD&RETURN s5, 73[DELAY_1ms_clock_cycles$:"s"]
 1E6  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1E7  21564                              LOAD&RETURN s5, 64[DELAY_1ms_clock_cycles$:"d"]
 1E8  21565                              LOAD&RETURN s5, 65[DELAY_1ms_clock_cycles$:"e"]
 1E9  2156C                              LOAD&RETURN s5, 6C[DELAY_1ms_clock_cycles$:"l"]
 1EA  21561                              LOAD&RETURN s5, 61[DELAY_1ms_clock_cycles$:"a"]
 1EB  21579                              LOAD&RETURN s5, 79[DELAY_1ms_clock_cycles$:"y"]
 1EC  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1ED  2153D                              LOAD&RETURN s5, 3D[DELAY_1ms_clock_cycles$:"="]
 1EE  21520                              LOAD&RETURN s5, 20[DELAY_1ms_clock_cycles$:" "]
 1EF  21500                              LOAD&RETURN s5, 00[NUL]
 1F0                                     ;
 1F0  21520           DELAY_set_1ms_msg: LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 1F1  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 1F2  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 1F3  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 1F4  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 1F5  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 1F6  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 1F7  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 1F8  21527                              LOAD&RETURN s5, 27[DELAY_set_1ms$:"'"]
 1F9  21531                              LOAD&RETURN s5, 31[DELAY_set_1ms$:"1"]
 1FA  2156D                              LOAD&RETURN s5, 6D[DELAY_set_1ms$:"m"]
 1FB  21573                              LOAD&RETURN s5, 73[DELAY_set_1ms$:"s"]
 1FC  2155F                              LOAD&RETURN s5, 5F[DELAY_set_1ms$:"_"]
 1FD  21564                              LOAD&RETURN s5, 64[DELAY_set_1ms$:"d"]
 1FE  21565                              LOAD&RETURN s5, 65[DELAY_set_1ms$:"e"]
 1FF  2156C                              LOAD&RETURN s5, 6C[DELAY_set_1ms$:"l"]
 200  21561                              LOAD&RETURN s5, 61[DELAY_set_1ms$:"a"]
 201  21579                              LOAD&RETURN s5, 79[DELAY_set_1ms$:"y"]
 202  2155F                              LOAD&RETURN s5, 5F[DELAY_set_1ms$:"_"]
 203  21563                              LOAD&RETURN s5, 63[DELAY_set_1ms$:"c"]
 204  2156F                              LOAD&RETURN s5, 6F[DELAY_set_1ms$:"o"]
 205  21575                              LOAD&RETURN s5, 75[DELAY_set_1ms$:"u"]
 206  2156E                              LOAD&RETURN s5, 6E[DELAY_set_1ms$:"n"]
 207  21574                              LOAD&RETURN s5, 74[DELAY_set_1ms$:"t"]
 208  21527                              LOAD&RETURN s5, 27[DELAY_set_1ms$:"'"]
 209  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 20A  21576                              LOAD&RETURN s5, 76[DELAY_set_1ms$:"v"]
 20B  21561                              LOAD&RETURN s5, 61[DELAY_set_1ms$:"a"]
 20C  2156C                              LOAD&RETURN s5, 6C[DELAY_set_1ms$:"l"]
 20D  21575                              LOAD&RETURN s5, 75[DELAY_set_1ms$:"u"]
 20E  21565                              LOAD&RETURN s5, 65[DELAY_set_1ms$:"e"]
 20F  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 210  2153D                              LOAD&RETURN s5, 3D[DELAY_set_1ms$:"="]
 211  21520                              LOAD&RETURN s5, 20[DELAY_set_1ms$:" "]
 212  21500                              LOAD&RETURN s5, 00[NUL]
 213                                     ;
 213                                     ;
 213                                     ;------------------------------------------------------------------------------------------
 213                                     ; Main Program
 213                                     ;------------------------------------------------------------------------------------------
 213                                     ;
 213                                     ; Timer
 213                                     ; -----
 213                                     ;
 213                                     ; The following code implements a simple timer to demonstrate that the software delays
 213                                     ; have been tuned correctly to the clock frequency applied to KCPSM6.
 213                                     ;
 213                                     ; The user is prompted to press 'S' (or 's') to start the timer which should then be
 213                                     ; observed to increment once per second up to 60 minutes. This allows the accuracy of the
 213                                     ; timer to be verified using a normal real time clock. The user can press 'R' (or 'r')
 213                                     ; to stop and reset the timer (note that the UART will capture the key entry but KCPSM6
 213                                     ; will only check once per second).
 213                                     ;
 213                                     ; When the time is running, the time value will be incremented once per second and sent
 213                                     ; to the UART for display on the terminal. This processing will introduce some additional
 213                                     ; processing delay impacting the overall accuracy. However, this increase could be
 213                                     ; determined and compensated for if greater accuracy was desirable. Note that the time
 213                                     ; values sent to the UART (e.g. 01:25) consist of 5 characters together with a space and
 213                                     ; a carriage return so they are immediately accommodated by the FIFO buffer within the
 213                                     ; UART so KCPSM6 does not have to wait whilst they are actually being transmitted.
 213                                     ;
 213  01B02                        main: LOAD sB, 02[TIMER_start_msg'upper]              ;prompt user to start timer
 214  01A4A                              LOAD sA, 4A[TIMER_start_msg'lower]
 215  20428                              CALL 428[send_message]
 216                                     ;
 216                                     ; Wait for user to enter 'S' or 's'
 216                                     ;
 216  20457              wait_for_start: CALL 457[UART_RX]
 217  32216                              JUMP Z, 216[wait_for_start]                     ;check for UART timeout
 218  1D553                              COMPARE s5, 53["S"]                             ;test character received
 219  3221C                              JUMP Z, 21C[start_timer]
 21A  1D573                              COMPARE s5, 73["s"]
 21B  36216                              JUMP NZ, 216[wait_for_start]
 21C                                     ;
 21C                                     ; Tell the user how to stop the timer.
 21C                                     ;
 21C  01B02                 start_timer: LOAD sB, 02[TIMER_stop_msg'upper]
 21D  01A9D                              LOAD sA, 9D[TIMER_stop_msg'lower]
 21E  20428                              CALL 428[send_message]
 21F                                     ;
 21F                                     ; The timer counts and displays minutes and seconds (mm:ss).
 21F                                     ; Registers sF, sE, sD and sC are used to hold each decimal digit value.
 21F                                     ;
 21F  01F00                              LOAD sF, 00[0'd]                                ;reset timer
 220  01E00                              LOAD sE, 00[0'd]
 221  01D00                              LOAD sD, 00[0'd]
 222  01C00                              LOAD sC, 00[0'd]
 223                                     ;
 223                                     ; The timer value is displayed and then a delay of 1 second is implemented using the
 223                                     ; software delay loop previously tuned to the clock frequency used in the design. A check
 223                                     ; is then made for a keyboard entry and the timer will then stop or increment and continue
 223                                     ; as required.
 223                                     ;
 223  2043A               timer_running: CALL 43A[send_space]                            ;display timer mm:ss
 224  005F0                              LOAD s5, sF
 225  2043C                              CALL 43C[send_decimal_digit]
 226  005E0                              LOAD s5, sE
 227  2043C                              CALL 43C[send_decimal_digit]
 228  0153A                              LOAD s5, 3A[":"]
 229  20452                              CALL 452[UART_TX]
 22A  005D0                              LOAD s5, sD
 22B  2043C                              CALL 43C[send_decimal_digit]
 22C  005C0                              LOAD s5, sC
 22D  2043C                              CALL 43C[send_decimal_digit]
 22E  2042F                              CALL 42F[send_CR]
 22F                                     ;
 22F  200EF                              CALL 0EF[delay_1s]                              ;wait 1 second
 230                                     ;
 230                                     ; Read and check any characters received by the UART during the last second. Note that
 230                                     ; the UART_RX routine is not used because it waits for up to 2,000 for a character to be
 230                                     ; received and we want to avoid additional delay to maintain reasonable accuracy of the
 230                                     ; timer.
 230                                     ;
 230  09000               test_for_stop: INPUT s0, 00[UART_status_port]                  ;read UART status
 231  0D008                              TEST s0, 08[UART_Rx_data_present]               ;C=1 when data present
 232  3E239                              JUMP NC, 239[increment_timer]
 233  09501                              INPUT s5, 01[UART_RX6_input_port]               ;read character from buffer
 234  1D552                              COMPARE s5, 52["R"]                             ;test character received
 235  32213                              JUMP Z, 213[main]                               ;stop timer if 'R' or 'r'
 236  1D572                              COMPARE s5, 72["r"]
 237  32213                              JUMP Z, 213[main]
 238  22230                              JUMP 230[test_for_stop]                         ;check for any more characters
 239                                     ;
 239                                     ; Increment timer
 239                                     ;
 239  11C01             increment_timer: ADD sC, 01[1'd]
 23A  1DC0A                              COMPARE sC, 0A[10'd]
 23B  36223                              JUMP NZ, 223[timer_running]
 23C  01C00                              LOAD sC, 00[0'd]
 23D  11D01                              ADD sD, 01[1'd]
 23E  1DD06                              COMPARE sD, 06[6'd]
 23F  36223                              JUMP NZ, 223[timer_running]
 240  01D00                              LOAD sD, 00[0'd]
 241  11E01                              ADD sE, 01[1'd]
 242  1DE0A                              COMPARE sE, 0A[10'd]
 243  36223                              JUMP NZ, 223[timer_running]
 244  01E00                              LOAD sE, 00[0'd]
 245  11F01                              ADD sF, 01[1'd]
 246  1DF06                              COMPARE sF, 06[6'd]
 247  36223                              JUMP NZ, 223[timer_running]
 248  01F00                              LOAD sF, 00[0'd]
 249  22223                              JUMP 223[timer_running]
 24A                                     ;
 24A                                     ;
 24A                                     ; Text messages used in this section
 24A                                     ;
 24A                                     STRING TIMER_introduction$, " Simple timer using the 1ms software delay loop"
 24A                                     STRING TIMER_start$, " Press 'S' key to start timer"
 24A                                     STRING TIMER_stop$, " (Press 'R' key to stop/reset timer)"
 24A                                     ;
 24A  2150D             TIMER_start_msg: LOAD&RETURN s5, 0D[CR]
 24B  2150D                              LOAD&RETURN s5, 0D[CR]
 24C  21520                              LOAD&RETURN s5, 20[TIMER_introduction$:" "]
 24D  21553                              LOAD&RETURN s5, 53[TIMER_introduction$:"S"]
 24E  21569                              LOAD&RETURN s5, 69[TIMER_introduction$:"i"]
 24F  2156D                              LOAD&RETURN s5, 6D[TIMER_introduction$:"m"]
 250  21570                              LOAD&RETURN s5, 70[TIMER_introduction$:"p"]
 251  2156C                              LOAD&RETURN s5, 6C[TIMER_introduction$:"l"]
 252  21565                              LOAD&RETURN s5, 65[TIMER_introduction$:"e"]
 253  21520                              LOAD&RETURN s5, 20[TIMER_introduction$:" "]
 254  21574                              LOAD&RETURN s5, 74[TIMER_introduction$:"t"]
 255  21569                              LOAD&RETURN s5, 69[TIMER_introduction$:"i"]
 256  2156D                              LOAD&RETURN s5, 6D[TIMER_introduction$:"m"]
 257  21565                              LOAD&RETURN s5, 65[TIMER_introduction$:"e"]
 258  21572                              LOAD&RETURN s5, 72[TIMER_introduction$:"r"]
 259  21520                              LOAD&RETURN s5, 20[TIMER_introduction$:" "]
 25A  21575                              LOAD&RETURN s5, 75[TIMER_introduction$:"u"]
 25B  21573                              LOAD&RETURN s5, 73[TIMER_introduction$:"s"]
 25C  21569                              LOAD&RETURN s5, 69[TIMER_introduction$:"i"]
 25D  2156E                              LOAD&RETURN s5, 6E[TIMER_introduction$:"n"]
 25E  21567                              LOAD&RETURN s5, 67[TIMER_introduction$:"g"]
 25F  21520                              LOAD&RETURN s5, 20[TIMER_introduction$:" "]
 260  21574                              LOAD&RETURN s5, 74[TIMER_introduction$:"t"]
 261  21568                              LOAD&RETURN s5, 68[TIMER_introduction$:"h"]
 262  21565                              LOAD&RETURN s5, 65[TIMER_introduction$:"e"]
 263  21520                              LOAD&RETURN s5, 20[TIMER_introduction$:" "]
 264  21531                              LOAD&RETURN s5, 31[TIMER_introduction$:"1"]
 265  2156D                              LOAD&RETURN s5, 6D[TIMER_introduction$:"m"]
 266  21573                              LOAD&RETURN s5, 73[TIMER_introduction$:"s"]
 267  21520                              LOAD&RETURN s5, 20[TIMER_introduction$:" "]
 268  21573                              LOAD&RETURN s5, 73[TIMER_introduction$:"s"]
 269  2156F                              LOAD&RETURN s5, 6F[TIMER_introduction$:"o"]
 26A  21566                              LOAD&RETURN s5, 66[TIMER_introduction$:"f"]
 26B  21574                              LOAD&RETURN s5, 74[TIMER_introduction$:"t"]
 26C  21577                              LOAD&RETURN s5, 77[TIMER_introduction$:"w"]
 26D  21561                              LOAD&RETURN s5, 61[TIMER_introduction$:"a"]
 26E  21572                              LOAD&RETURN s5, 72[TIMER_introduction$:"r"]
 26F  21565                              LOAD&RETURN s5, 65[TIMER_introduction$:"e"]
 270  21520                              LOAD&RETURN s5, 20[TIMER_introduction$:" "]
 271  21564                              LOAD&RETURN s5, 64[TIMER_introduction$:"d"]
 272  21565                              LOAD&RETURN s5, 65[TIMER_introduction$:"e"]
 273  2156C                              LOAD&RETURN s5, 6C[TIMER_introduction$:"l"]
 274  21561                              LOAD&RETURN s5, 61[TIMER_introduction$:"a"]
 275  21579                              LOAD&RETURN s5, 79[TIMER_introduction$:"y"]
 276  21520                              LOAD&RETURN s5, 20[TIMER_introduction$:" "]
 277  2156C                              LOAD&RETURN s5, 6C[TIMER_introduction$:"l"]
 278  2156F                              LOAD&RETURN s5, 6F[TIMER_introduction$:"o"]
 279  2156F                              LOAD&RETURN s5, 6F[TIMER_introduction$:"o"]
 27A  21570                              LOAD&RETURN s5, 70[TIMER_introduction$:"p"]
 27B  2150D                              LOAD&RETURN s5, 0D[CR]
 27C  2150D                              LOAD&RETURN s5, 0D[CR]
 27D  21520                              LOAD&RETURN s5, 20[TIMER_start$:" "]
 27E  21550                              LOAD&RETURN s5, 50[TIMER_start$:"P"]
 27F  21572                              LOAD&RETURN s5, 72[TIMER_start$:"r"]
 280  21565                              LOAD&RETURN s5, 65[TIMER_start$:"e"]
 281  21573                              LOAD&RETURN s5, 73[TIMER_start$:"s"]
 282  21573                              LOAD&RETURN s5, 73[TIMER_start$:"s"]
 283  21520                              LOAD&RETURN s5, 20[TIMER_start$:" "]
 284  21527                              LOAD&RETURN s5, 27[TIMER_start$:"'"]
 285  21553                              LOAD&RETURN s5, 53[TIMER_start$:"S"]
 286  21527                              LOAD&RETURN s5, 27[TIMER_start$:"'"]
 287  21520                              LOAD&RETURN s5, 20[TIMER_start$:" "]
 288  2156B                              LOAD&RETURN s5, 6B[TIMER_start$:"k"]
 289  21565                              LOAD&RETURN s5, 65[TIMER_start$:"e"]
 28A  21579                              LOAD&RETURN s5, 79[TIMER_start$:"y"]
 28B  21520                              LOAD&RETURN s5, 20[TIMER_start$:" "]
 28C  21574                              LOAD&RETURN s5, 74[TIMER_start$:"t"]
 28D  2156F                              LOAD&RETURN s5, 6F[TIMER_start$:"o"]
 28E  21520                              LOAD&RETURN s5, 20[TIMER_start$:" "]
 28F  21573                              LOAD&RETURN s5, 73[TIMER_start$:"s"]
 290  21574                              LOAD&RETURN s5, 74[TIMER_start$:"t"]
 291  21561                              LOAD&RETURN s5, 61[TIMER_start$:"a"]
 292  21572                              LOAD&RETURN s5, 72[TIMER_start$:"r"]
 293  21574                              LOAD&RETURN s5, 74[TIMER_start$:"t"]
 294  21520                              LOAD&RETURN s5, 20[TIMER_start$:" "]
 295  21574                              LOAD&RETURN s5, 74[TIMER_start$:"t"]
 296  21569                              LOAD&RETURN s5, 69[TIMER_start$:"i"]
 297  2156D                              LOAD&RETURN s5, 6D[TIMER_start$:"m"]
 298  21565                              LOAD&RETURN s5, 65[TIMER_start$:"e"]
 299  21572                              LOAD&RETURN s5, 72[TIMER_start$:"r"]
 29A  2150D                              LOAD&RETURN s5, 0D[CR]
 29B  2150D                              LOAD&RETURN s5, 0D[CR]
 29C  21500                              LOAD&RETURN s5, 00[NUL]
 29D                                     ;
 29D  2150D              TIMER_stop_msg: LOAD&RETURN s5, 0D[CR]
 29E  2150D                              LOAD&RETURN s5, 0D[CR]
 29F  21520                              LOAD&RETURN s5, 20[TIMER_stop$:" "]
 2A0  21528                              LOAD&RETURN s5, 28[TIMER_stop$:"("]
 2A1  21550                              LOAD&RETURN s5, 50[TIMER_stop$:"P"]
 2A2  21572                              LOAD&RETURN s5, 72[TIMER_stop$:"r"]
 2A3  21565                              LOAD&RETURN s5, 65[TIMER_stop$:"e"]
 2A4  21573                              LOAD&RETURN s5, 73[TIMER_stop$:"s"]
 2A5  21573                              LOAD&RETURN s5, 73[TIMER_stop$:"s"]
 2A6  21520                              LOAD&RETURN s5, 20[TIMER_stop$:" "]
 2A7  21527                              LOAD&RETURN s5, 27[TIMER_stop$:"'"]
 2A8  21552                              LOAD&RETURN s5, 52[TIMER_stop$:"R"]
 2A9  21527                              LOAD&RETURN s5, 27[TIMER_stop$:"'"]
 2AA  21520                              LOAD&RETURN s5, 20[TIMER_stop$:" "]
 2AB  2156B                              LOAD&RETURN s5, 6B[TIMER_stop$:"k"]
 2AC  21565                              LOAD&RETURN s5, 65[TIMER_stop$:"e"]
 2AD  21579                              LOAD&RETURN s5, 79[TIMER_stop$:"y"]
 2AE  21520                              LOAD&RETURN s5, 20[TIMER_stop$:" "]
 2AF  21574                              LOAD&RETURN s5, 74[TIMER_stop$:"t"]
 2B0  2156F                              LOAD&RETURN s5, 6F[TIMER_stop$:"o"]
 2B1  21520                              LOAD&RETURN s5, 20[TIMER_stop$:" "]
 2B2  21573                              LOAD&RETURN s5, 73[TIMER_stop$:"s"]
 2B3  21574                              LOAD&RETURN s5, 74[TIMER_stop$:"t"]
 2B4  2156F                              LOAD&RETURN s5, 6F[TIMER_stop$:"o"]
 2B5  21570                              LOAD&RETURN s5, 70[TIMER_stop$:"p"]
 2B6  2152F                              LOAD&RETURN s5, 2F[TIMER_stop$:"/"]
 2B7  21572                              LOAD&RETURN s5, 72[TIMER_stop$:"r"]
 2B8  21565                              LOAD&RETURN s5, 65[TIMER_stop$:"e"]
 2B9  21573                              LOAD&RETURN s5, 73[TIMER_stop$:"s"]
 2BA  21565                              LOAD&RETURN s5, 65[TIMER_stop$:"e"]
 2BB  21574                              LOAD&RETURN s5, 74[TIMER_stop$:"t"]
 2BC  21520                              LOAD&RETURN s5, 20[TIMER_stop$:" "]
 2BD  21574                              LOAD&RETURN s5, 74[TIMER_stop$:"t"]
 2BE  21569                              LOAD&RETURN s5, 69[TIMER_stop$:"i"]
 2BF  2156D                              LOAD&RETURN s5, 6D[TIMER_stop$:"m"]
 2C0  21565                              LOAD&RETURN s5, 65[TIMER_stop$:"e"]
 2C1  21572                              LOAD&RETURN s5, 72[TIMER_stop$:"r"]
 2C2  21529                              LOAD&RETURN s5, 29[TIMER_stop$:")"]
 2C3  2150D                              LOAD&RETURN s5, 0D[CR]
 2C4  2150D                              LOAD&RETURN s5, 0D[CR]
 2C5  21500                              LOAD&RETURN s5, 00[NUL]
 2C6                                     ;
 2C6                                     ;
 2C6                                     ;------------------------------------------------------------------------------------------
 2C6                                     ; Clear terminal and home cursor sequences for PicoTerm (or similar)
 2C6                                     ;------------------------------------------------------------------------------------------
 2C6                                     ;
 2C6                                     ; ANSI Escape Sequences/codes (VT100)
 2C6                                     ;
 2C6                                     ; Note: PicoTerm accepts these sequences without any issues but some other terminals
 2C6                                     ;       may require some additional time to implement the task before further characters
 2C6                                     ;       can be accepted. So if you experience missing or corrupted communication then
 2C6                                     ;       try inserting the 1ms delays where indicated. However, in this reference design
 2C6                                     ;       you will also need to reorder the initialisation code such that the 1ms delay
 2C6                                     ;       is correctly defined before these subroutines are called.
 2C6                                     ;
 2C6  0151B                clear_screen: LOAD s5, 1B[ESC]                                ;clear terminal sequence
 2C7  20452                              CALL 452[UART_TX]
 2C8  0155B                              LOAD s5, 5B["["]
 2C9  20452                              CALL 452[UART_TX]
 2CA  01532                              LOAD s5, 32["2"]
 2CB  20452                              CALL 452[UART_TX]
 2CC  0154A                              LOAD s5, 4A["J"]
 2CD  20452                              CALL 452[UART_TX]
 2CE                                     ;CALL delay_1ms                           ;Delay for reliable operation?
 2CE  25000                              RETURN 
 2CF                                     ;
 2CF  0151B                 cursor_home: LOAD s5, 1B[ESC]                                ;Send cursor to upper-left of display
 2D0  20452                              CALL 452[UART_TX]
 2D1  0155B                              LOAD s5, 5B["["]
 2D2  20452                              CALL 452[UART_TX]
 2D3  01548                              LOAD s5, 48["H"]
 2D4  20452                              CALL 452[UART_TX]
 2D5                                     ;CALL delay_1ms                           ;Delay for reliable operation?
 2D5  25000                              RETURN 
 2D6                                     ;
 2D6                                     ;
 2D6                                     ;------------------------------------------------------------------------------------------
 2D6                                     ; Welcome Message.
 2D6                                     ;------------------------------------------------------------------------------------------
 2D6                                     ;
 2D6                                     ; The welcome message includes a display of the version information available from the
 2D6                                     ; assembler and the 'hwbuild' from the instantiation of KCPSM6 in the hardware design.
 2D6                                     ;
 2D6  01B02             welcome_message: LOAD sB, 02[welcome_msg'upper]
 2D7  01ADD                              LOAD sA, DD[welcome_msg'lower]
 2D8  20428                              CALL 428[send_message]
 2D9  14580                              HWBUILD s5                                      ;hardware version defines ASCII letter
 2DA  20452                              CALL 452[UART_TX]
 2DB  2042F                              CALL 42F[send_CR]
 2DC  25000                              RETURN 
 2DD                                     ;
 2DD                                     ; Welcome message
 2DD                                     ;
 2DD                                     STRING banner1$, "  _  ______ ____  ____  __  __  __"
 2DD                                     STRING banner2$, " | |/ / ___|  _ \/ ___||  \/  |/ /_"
 2DD                                     STRING banner3$, " | ' / |   | |_) \___ \| |\/| | '_ \"
 2DD                                     STRING banner4$, " | . \ |___|  __/ ___) | |  | | (_) )"
 2DD                                     STRING banner5$, " |_|\_\____|_|   |____/|_|  |_|\___/"
 2DD                                     ;
 2DD                                     ; Welcome message
 2DD                                     ;
 2DD                                     STRING welcome1$, "Automatic BAUD Rate Control and Software Delay Loop Tuning"
 2DD                                     STRING welcome2$, "Assembly Date: "
 2DD                                     STRING welcome3$, "   Time: "
 2DD                                     STRING welcome4$, "Assembler Version: "
 2DD                                     STRING welcome5$, "Hardware Design: "
 2DD                                     ;
 2DD                                     ;
 2DD  21520                 welcome_msg: LOAD&RETURN s5, 20[banner1$:" "]
 2DE  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2DF  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2E0  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2E1  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2E2  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2E3  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2E4  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2E5  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2E6  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2E7  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2E8  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2E9  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2EA  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2EB  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2EC  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2ED  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2EE  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2EF  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2F0  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2F1  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2F2  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2F3  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2F4  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2F5  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2F6  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2F7  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2F8  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2F9  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2FA  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2FB  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2FC  21520                              LOAD&RETURN s5, 20[banner1$:" "]
 2FD  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2FE  2155F                              LOAD&RETURN s5, 5F[banner1$:"_"]
 2FF  2150D                              LOAD&RETURN s5, 0D[CR]
 300  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 301  2157C                              LOAD&RETURN s5, 7C[banner2$:"|"]
 302  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 303  2157C                              LOAD&RETURN s5, 7C[banner2$:"|"]
 304  2152F                              LOAD&RETURN s5, 2F[banner2$:"/"]
 305  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 306  2152F                              LOAD&RETURN s5, 2F[banner2$:"/"]
 307  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 308  2155F                              LOAD&RETURN s5, 5F[banner2$:"_"]
 309  2155F                              LOAD&RETURN s5, 5F[banner2$:"_"]
 30A  2155F                              LOAD&RETURN s5, 5F[banner2$:"_"]
 30B  2157C                              LOAD&RETURN s5, 7C[banner2$:"|"]
 30C  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 30D  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 30E  2155F                              LOAD&RETURN s5, 5F[banner2$:"_"]
 30F  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 310  2155C                              LOAD&RETURN s5, 5C[banner2$:"\"]
 311  2152F                              LOAD&RETURN s5, 2F[banner2$:"/"]
 312  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 313  2155F                              LOAD&RETURN s5, 5F[banner2$:"_"]
 314  2155F                              LOAD&RETURN s5, 5F[banner2$:"_"]
 315  2155F                              LOAD&RETURN s5, 5F[banner2$:"_"]
 316  2157C                              LOAD&RETURN s5, 7C[banner2$:"|"]
 317  2157C                              LOAD&RETURN s5, 7C[banner2$:"|"]
 318  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 319  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 31A  2155C                              LOAD&RETURN s5, 5C[banner2$:"\"]
 31B  2152F                              LOAD&RETURN s5, 2F[banner2$:"/"]
 31C  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 31D  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 31E  2157C                              LOAD&RETURN s5, 7C[banner2$:"|"]
 31F  2152F                              LOAD&RETURN s5, 2F[banner2$:"/"]
 320  21520                              LOAD&RETURN s5, 20[banner2$:" "]
 321  2152F                              LOAD&RETURN s5, 2F[banner2$:"/"]
 322  2155F                              LOAD&RETURN s5, 5F[banner2$:"_"]
 323  2150D                              LOAD&RETURN s5, 0D[CR]
 324  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 325  2157C                              LOAD&RETURN s5, 7C[banner3$:"|"]
 326  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 327  21527                              LOAD&RETURN s5, 27[banner3$:"'"]
 328  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 329  2152F                              LOAD&RETURN s5, 2F[banner3$:"/"]
 32A  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 32B  2157C                              LOAD&RETURN s5, 7C[banner3$:"|"]
 32C  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 32D  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 32E  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 32F  2157C                              LOAD&RETURN s5, 7C[banner3$:"|"]
 330  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 331  2157C                              LOAD&RETURN s5, 7C[banner3$:"|"]
 332  2155F                              LOAD&RETURN s5, 5F[banner3$:"_"]
 333  21529                              LOAD&RETURN s5, 29[banner3$:")"]
 334  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 335  2155C                              LOAD&RETURN s5, 5C[banner3$:"\"]
 336  2155F                              LOAD&RETURN s5, 5F[banner3$:"_"]
 337  2155F                              LOAD&RETURN s5, 5F[banner3$:"_"]
 338  2155F                              LOAD&RETURN s5, 5F[banner3$:"_"]
 339  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 33A  2155C                              LOAD&RETURN s5, 5C[banner3$:"\"]
 33B  2157C                              LOAD&RETURN s5, 7C[banner3$:"|"]
 33C  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 33D  2157C                              LOAD&RETURN s5, 7C[banner3$:"|"]
 33E  2155C                              LOAD&RETURN s5, 5C[banner3$:"\"]
 33F  2152F                              LOAD&RETURN s5, 2F[banner3$:"/"]
 340  2157C                              LOAD&RETURN s5, 7C[banner3$:"|"]
 341  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 342  2157C                              LOAD&RETURN s5, 7C[banner3$:"|"]
 343  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 344  21527                              LOAD&RETURN s5, 27[banner3$:"'"]
 345  2155F                              LOAD&RETURN s5, 5F[banner3$:"_"]
 346  21520                              LOAD&RETURN s5, 20[banner3$:" "]
 347  2155C                              LOAD&RETURN s5, 5C[banner3$:"\"]
 348  2150D                              LOAD&RETURN s5, 0D[CR]
 349  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 34A  2157C                              LOAD&RETURN s5, 7C[banner4$:"|"]
 34B  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 34C  2152E                              LOAD&RETURN s5, 2E[banner4$:"."]
 34D  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 34E  2155C                              LOAD&RETURN s5, 5C[banner4$:"\"]
 34F  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 350  2157C                              LOAD&RETURN s5, 7C[banner4$:"|"]
 351  2155F                              LOAD&RETURN s5, 5F[banner4$:"_"]
 352  2155F                              LOAD&RETURN s5, 5F[banner4$:"_"]
 353  2155F                              LOAD&RETURN s5, 5F[banner4$:"_"]
 354  2157C                              LOAD&RETURN s5, 7C[banner4$:"|"]
 355  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 356  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 357  2155F                              LOAD&RETURN s5, 5F[banner4$:"_"]
 358  2155F                              LOAD&RETURN s5, 5F[banner4$:"_"]
 359  2152F                              LOAD&RETURN s5, 2F[banner4$:"/"]
 35A  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 35B  2155F                              LOAD&RETURN s5, 5F[banner4$:"_"]
 35C  2155F                              LOAD&RETURN s5, 5F[banner4$:"_"]
 35D  2155F                              LOAD&RETURN s5, 5F[banner4$:"_"]
 35E  21529                              LOAD&RETURN s5, 29[banner4$:")"]
 35F  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 360  2157C                              LOAD&RETURN s5, 7C[banner4$:"|"]
 361  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 362  2157C                              LOAD&RETURN s5, 7C[banner4$:"|"]
 363  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 364  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 365  2157C                              LOAD&RETURN s5, 7C[banner4$:"|"]
 366  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 367  2157C                              LOAD&RETURN s5, 7C[banner4$:"|"]
 368  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 369  21528                              LOAD&RETURN s5, 28[banner4$:"("]
 36A  2155F                              LOAD&RETURN s5, 5F[banner4$:"_"]
 36B  21529                              LOAD&RETURN s5, 29[banner4$:")"]
 36C  21520                              LOAD&RETURN s5, 20[banner4$:" "]
 36D  21529                              LOAD&RETURN s5, 29[banner4$:")"]
 36E  2150D                              LOAD&RETURN s5, 0D[CR]
 36F  21520                              LOAD&RETURN s5, 20[banner5$:" "]
 370  2157C                              LOAD&RETURN s5, 7C[banner5$:"|"]
 371  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 372  2157C                              LOAD&RETURN s5, 7C[banner5$:"|"]
 373  2155C                              LOAD&RETURN s5, 5C[banner5$:"\"]
 374  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 375  2155C                              LOAD&RETURN s5, 5C[banner5$:"\"]
 376  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 377  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 378  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 379  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 37A  2157C                              LOAD&RETURN s5, 7C[banner5$:"|"]
 37B  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 37C  2157C                              LOAD&RETURN s5, 7C[banner5$:"|"]
 37D  21520                              LOAD&RETURN s5, 20[banner5$:" "]
 37E  21520                              LOAD&RETURN s5, 20[banner5$:" "]
 37F  21520                              LOAD&RETURN s5, 20[banner5$:" "]
 380  2157C                              LOAD&RETURN s5, 7C[banner5$:"|"]
 381  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 382  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 383  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 384  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 385  2152F                              LOAD&RETURN s5, 2F[banner5$:"/"]
 386  2157C                              LOAD&RETURN s5, 7C[banner5$:"|"]
 387  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 388  2157C                              LOAD&RETURN s5, 7C[banner5$:"|"]
 389  21520                              LOAD&RETURN s5, 20[banner5$:" "]
 38A  21520                              LOAD&RETURN s5, 20[banner5$:" "]
 38B  2157C                              LOAD&RETURN s5, 7C[banner5$:"|"]
 38C  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 38D  2157C                              LOAD&RETURN s5, 7C[banner5$:"|"]
 38E  2155C                              LOAD&RETURN s5, 5C[banner5$:"\"]
 38F  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 390  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 391  2155F                              LOAD&RETURN s5, 5F[banner5$:"_"]
 392  2152F                              LOAD&RETURN s5, 2F[banner5$:"/"]
 393  2150D                              LOAD&RETURN s5, 0D[CR]
 394  2150D                              LOAD&RETURN s5, 0D[CR]
 395  21541                              LOAD&RETURN s5, 41[welcome1$:"A"]
 396  21575                              LOAD&RETURN s5, 75[welcome1$:"u"]
 397  21574                              LOAD&RETURN s5, 74[welcome1$:"t"]
 398  2156F                              LOAD&RETURN s5, 6F[welcome1$:"o"]
 399  2156D                              LOAD&RETURN s5, 6D[welcome1$:"m"]
 39A  21561                              LOAD&RETURN s5, 61[welcome1$:"a"]
 39B  21574                              LOAD&RETURN s5, 74[welcome1$:"t"]
 39C  21569                              LOAD&RETURN s5, 69[welcome1$:"i"]
 39D  21563                              LOAD&RETURN s5, 63[welcome1$:"c"]
 39E  21520                              LOAD&RETURN s5, 20[welcome1$:" "]
 39F  21542                              LOAD&RETURN s5, 42[welcome1$:"B"]
 3A0  21541                              LOAD&RETURN s5, 41[welcome1$:"A"]
 3A1  21555                              LOAD&RETURN s5, 55[welcome1$:"U"]
 3A2  21544                              LOAD&RETURN s5, 44[welcome1$:"D"]
 3A3  21520                              LOAD&RETURN s5, 20[welcome1$:" "]
 3A4  21552                              LOAD&RETURN s5, 52[welcome1$:"R"]
 3A5  21561                              LOAD&RETURN s5, 61[welcome1$:"a"]
 3A6  21574                              LOAD&RETURN s5, 74[welcome1$:"t"]
 3A7  21565                              LOAD&RETURN s5, 65[welcome1$:"e"]
 3A8  21520                              LOAD&RETURN s5, 20[welcome1$:" "]
 3A9  21543                              LOAD&RETURN s5, 43[welcome1$:"C"]
 3AA  2156F                              LOAD&RETURN s5, 6F[welcome1$:"o"]
 3AB  2156E                              LOAD&RETURN s5, 6E[welcome1$:"n"]
 3AC  21574                              LOAD&RETURN s5, 74[welcome1$:"t"]
 3AD  21572                              LOAD&RETURN s5, 72[welcome1$:"r"]
 3AE  2156F                              LOAD&RETURN s5, 6F[welcome1$:"o"]
 3AF  2156C                              LOAD&RETURN s5, 6C[welcome1$:"l"]
 3B0  21520                              LOAD&RETURN s5, 20[welcome1$:" "]
 3B1  21561                              LOAD&RETURN s5, 61[welcome1$:"a"]
 3B2  2156E                              LOAD&RETURN s5, 6E[welcome1$:"n"]
 3B3  21564                              LOAD&RETURN s5, 64[welcome1$:"d"]
 3B4  21520                              LOAD&RETURN s5, 20[welcome1$:" "]
 3B5  21553                              LOAD&RETURN s5, 53[welcome1$:"S"]
 3B6  2156F                              LOAD&RETURN s5, 6F[welcome1$:"o"]
 3B7  21566                              LOAD&RETURN s5, 66[welcome1$:"f"]
 3B8  21574                              LOAD&RETURN s5, 74[welcome1$:"t"]
 3B9  21577                              LOAD&RETURN s5, 77[welcome1$:"w"]
 3BA  21561                              LOAD&RETURN s5, 61[welcome1$:"a"]
 3BB  21572                              LOAD&RETURN s5, 72[welcome1$:"r"]
 3BC  21565                              LOAD&RETURN s5, 65[welcome1$:"e"]
 3BD  21520                              LOAD&RETURN s5, 20[welcome1$:" "]
 3BE  21544                              LOAD&RETURN s5, 44[welcome1$:"D"]
 3BF  21565                              LOAD&RETURN s5, 65[welcome1$:"e"]
 3C0  2156C                              LOAD&RETURN s5, 6C[welcome1$:"l"]
 3C1  21561                              LOAD&RETURN s5, 61[welcome1$:"a"]
 3C2  21579                              LOAD&RETURN s5, 79[welcome1$:"y"]
 3C3  21520                              LOAD&RETURN s5, 20[welcome1$:" "]
 3C4  2154C                              LOAD&RETURN s5, 4C[welcome1$:"L"]
 3C5  2156F                              LOAD&RETURN s5, 6F[welcome1$:"o"]
 3C6  2156F                              LOAD&RETURN s5, 6F[welcome1$:"o"]
 3C7  21570                              LOAD&RETURN s5, 70[welcome1$:"p"]
 3C8  21520                              LOAD&RETURN s5, 20[welcome1$:" "]
 3C9  21554                              LOAD&RETURN s5, 54[welcome1$:"T"]
 3CA  21575                              LOAD&RETURN s5, 75[welcome1$:"u"]
 3CB  2156E                              LOAD&RETURN s5, 6E[welcome1$:"n"]
 3CC  21569                              LOAD&RETURN s5, 69[welcome1$:"i"]
 3CD  2156E                              LOAD&RETURN s5, 6E[welcome1$:"n"]
 3CE  21567                              LOAD&RETURN s5, 67[welcome1$:"g"]
 3CF  2150D                              LOAD&RETURN s5, 0D[CR]
 3D0  2150D                              LOAD&RETURN s5, 0D[CR]
 3D1  21541                              LOAD&RETURN s5, 41[welcome2$:"A"]
 3D2  21573                              LOAD&RETURN s5, 73[welcome2$:"s"]
 3D3  21573                              LOAD&RETURN s5, 73[welcome2$:"s"]
 3D4  21565                              LOAD&RETURN s5, 65[welcome2$:"e"]
 3D5  2156D                              LOAD&RETURN s5, 6D[welcome2$:"m"]
 3D6  21562                              LOAD&RETURN s5, 62[welcome2$:"b"]
 3D7  2156C                              LOAD&RETURN s5, 6C[welcome2$:"l"]
 3D8  21579                              LOAD&RETURN s5, 79[welcome2$:"y"]
 3D9  21520                              LOAD&RETURN s5, 20[welcome2$:" "]
 3DA  21544                              LOAD&RETURN s5, 44[welcome2$:"D"]
 3DB  21561                              LOAD&RETURN s5, 61[welcome2$:"a"]
 3DC  21574                              LOAD&RETURN s5, 74[welcome2$:"t"]
 3DD  21565                              LOAD&RETURN s5, 65[welcome2$:"e"]
 3DE  2153A                              LOAD&RETURN s5, 3A[welcome2$:":"]
 3DF  21520                              LOAD&RETURN s5, 20[welcome2$:" "]
 3E0  21532                              LOAD&RETURN s5, 32[datestamp$:"2"]
 3E1  21532                              LOAD&RETURN s5, 32[datestamp$:"2"]
 3E2  21520                              LOAD&RETURN s5, 20[datestamp$:" "]
 3E3  2154A                              LOAD&RETURN s5, 4A[datestamp$:"J"]
 3E4  21561                              LOAD&RETURN s5, 61[datestamp$:"a"]
 3E5  2156E                              LOAD&RETURN s5, 6E[datestamp$:"n"]
 3E6  21520                              LOAD&RETURN s5, 20[datestamp$:" "]
 3E7  21532                              LOAD&RETURN s5, 32[datestamp$:"2"]
 3E8  21530                              LOAD&RETURN s5, 30[datestamp$:"0"]
 3E9  21532                              LOAD&RETURN s5, 32[datestamp$:"2"]
 3EA  21532                              LOAD&RETURN s5, 32[datestamp$:"2"]
 3EB  21520                              LOAD&RETURN s5, 20[welcome3$:" "]
 3EC  21520                              LOAD&RETURN s5, 20[welcome3$:" "]
 3ED  21520                              LOAD&RETURN s5, 20[welcome3$:" "]
 3EE  21554                              LOAD&RETURN s5, 54[welcome3$:"T"]
 3EF  21569                              LOAD&RETURN s5, 69[welcome3$:"i"]
 3F0  2156D                              LOAD&RETURN s5, 6D[welcome3$:"m"]
 3F1  21565                              LOAD&RETURN s5, 65[welcome3$:"e"]
 3F2  2153A                              LOAD&RETURN s5, 3A[welcome3$:":"]
 3F3  21520                              LOAD&RETURN s5, 20[welcome3$:" "]
 3F4  21531                              LOAD&RETURN s5, 31[timestamp$:"1"]
 3F5  21534                              LOAD&RETURN s5, 34[timestamp$:"4"]
 3F6  2153A                              LOAD&RETURN s5, 3A[timestamp$:":"]
 3F7  21531                              LOAD&RETURN s5, 31[timestamp$:"1"]
 3F8  21539                              LOAD&RETURN s5, 39[timestamp$:"9"]
 3F9  2153A                              LOAD&RETURN s5, 3A[timestamp$:":"]
 3FA  21535                              LOAD&RETURN s5, 35[timestamp$:"5"]
 3FB  21530                              LOAD&RETURN s5, 30[timestamp$:"0"]
 3FC  2150D                              LOAD&RETURN s5, 0D[CR]
 3FD  21541                              LOAD&RETURN s5, 41[welcome4$:"A"]
 3FE  21573                              LOAD&RETURN s5, 73[welcome4$:"s"]
 3FF  21573                              LOAD&RETURN s5, 73[welcome4$:"s"]
 400  21565                              LOAD&RETURN s5, 65[welcome4$:"e"]
 401  2156D                              LOAD&RETURN s5, 6D[welcome4$:"m"]
 402  21562                              LOAD&RETURN s5, 62[welcome4$:"b"]
 403  2156C                              LOAD&RETURN s5, 6C[welcome4$:"l"]
 404  21565                              LOAD&RETURN s5, 65[welcome4$:"e"]
 405  21572                              LOAD&RETURN s5, 72[welcome4$:"r"]
 406  21520                              LOAD&RETURN s5, 20[welcome4$:" "]
 407  21556                              LOAD&RETURN s5, 56[welcome4$:"V"]
 408  21565                              LOAD&RETURN s5, 65[welcome4$:"e"]
 409  21572                              LOAD&RETURN s5, 72[welcome4$:"r"]
 40A  21573                              LOAD&RETURN s5, 73[welcome4$:"s"]
 40B  21569                              LOAD&RETURN s5, 69[welcome4$:"i"]
 40C  2156F                              LOAD&RETURN s5, 6F[welcome4$:"o"]
 40D  2156E                              LOAD&RETURN s5, 6E[welcome4$:"n"]
 40E  2153A                              LOAD&RETURN s5, 3A[welcome4$:":"]
 40F  21520                              LOAD&RETURN s5, 20[welcome4$:" "]
 410  21576                              LOAD&RETURN s5, 76[KCPSM6_version$:"v"]
 411  21532                              LOAD&RETURN s5, 32[KCPSM6_version$:"2"]
 412  2152E                              LOAD&RETURN s5, 2E[KCPSM6_version$:"."]
 413  21537                              LOAD&RETURN s5, 37[KCPSM6_version$:"7"]
 414  21530                              LOAD&RETURN s5, 30[KCPSM6_version$:"0"]
 415  2150D                              LOAD&RETURN s5, 0D[CR]
 416  21548                              LOAD&RETURN s5, 48[welcome5$:"H"]
 417  21561                              LOAD&RETURN s5, 61[welcome5$:"a"]
 418  21572                              LOAD&RETURN s5, 72[welcome5$:"r"]
 419  21564                              LOAD&RETURN s5, 64[welcome5$:"d"]
 41A  21577                              LOAD&RETURN s5, 77[welcome5$:"w"]
 41B  21561                              LOAD&RETURN s5, 61[welcome5$:"a"]
 41C  21572                              LOAD&RETURN s5, 72[welcome5$:"r"]
 41D  21565                              LOAD&RETURN s5, 65[welcome5$:"e"]
 41E  21520                              LOAD&RETURN s5, 20[welcome5$:" "]
 41F  21544                              LOAD&RETURN s5, 44[welcome5$:"D"]
 420  21565                              LOAD&RETURN s5, 65[welcome5$:"e"]
 421  21573                              LOAD&RETURN s5, 73[welcome5$:"s"]
 422  21569                              LOAD&RETURN s5, 69[welcome5$:"i"]
 423  21567                              LOAD&RETURN s5, 67[welcome5$:"g"]
 424  2156E                              LOAD&RETURN s5, 6E[welcome5$:"n"]
 425  2153A                              LOAD&RETURN s5, 3A[welcome5$:":"]
 426  21520                              LOAD&RETURN s5, 20[welcome5$:" "]
 427  21500                              LOAD&RETURN s5, 00[NUL]
 428                                     ;
 428                                     ;
 428                                     ;------------------------------------------------------------------------------------------
 428                                     ; Send a message to the UART
 428                                     ;------------------------------------------------------------------------------------------
 428                                     ;
 428                                     ; A message is transmitted to the USB-UART.
 428                                     ; The start address of the message must be provided in [sB,sA].
 428                                     ; Terminate the transmission with a NULL character (00 hex).
 428                                     ;
 428  24BA0                send_message: CALL@ (sB, sA)
 429  1D500                              COMPARE s5, 00                                  ;terminate on NUL character
 42A  31000                              RETURN Z
 42B  20452                              CALL 452[UART_TX]
 42C  11A01                              ADD sA, 01[1'd]
 42D  13B00                              ADDCY sB, 00[0'd]
 42E  22428                              JUMP 428[send_message]
 42F                                     ;
 42F                                     ;
 42F                                     ;------------------------------------------------------------------------------------------
 42F                                     ; Send Carriage Return to UART
 42F                                     ;------------------------------------------------------------------------------------------
 42F                                     ;
 42F                                     ; Registers used s0, s1, s2, and s5.
 42F                                     ;
 42F  0150D                     send_CR: LOAD s5, 0D[CR]
 430  22452                              JUMP 452[UART_TX]                               ;includes RETURN
 431                                     ;
 431                                     ;
 431                                     ;------------------------------------------------------------------------------------------
 431                                     ; Send ' Hex' followed by Carriage Return to UART
 431                                     ;------------------------------------------------------------------------------------------
 431                                     ;
 431                                     ; Registers used s0, s1, s2, and s5.
 431                                     ;
 431  2043A                 send_Hex_CR: CALL 43A[send_space]
 432  01548                              LOAD s5, 48["H"]
 433  20452                              CALL 452[UART_TX]
 434  01565                              LOAD s5, 65["e"]
 435  20452                              CALL 452[UART_TX]
 436  01578                              LOAD s5, 78["x"]
 437  20452                              CALL 452[UART_TX]
 438  0150D                              LOAD s5, 0D[CR]
 439  22452                              JUMP 452[UART_TX]                               ;includes RETURN
 43A                                     ;
 43A                                     ;
 43A                                     ;------------------------------------------------------------------------------------------
 43A                                     ; Send a Space to UART
 43A                                     ;------------------------------------------------------------------------------------------
 43A                                     ;
 43A                                     ; Registers used s0, s1, s2, and s5.
 43A                                     ;
 43A  01520                  send_space: LOAD s5, 20[" "]
 43B  22452                              JUMP 452[UART_TX]                               ;includes RETURN
 43C                                     ;
 43C                                     ;
 43C                                     ;------------------------------------------------------------------------------------------
 43C                                     ; Send decimal digit to UART
 43C                                     ;------------------------------------------------------------------------------------------
 43C                                     ;
 43C                                     ; The value provided in register s5 should be in the range 00 to 09 hex and this will
 43C                                     ; be converted to the corresponding decimal character and sent to the UART
 43C                                     ;
 43C                                     ; Registers used s0, s1, s2, and s5.
 43C                                     ;
 43C  11530          send_decimal_digit: ADD s5, 30["0"]                                 ;convert to ASCII character
 43D  22452                              JUMP 452[UART_TX]                               ;includes RETURN
 43E                                     ;
 43E                                     ;
 43E                                     ;------------------------------------------------------------------------------------------
 43E                                     ; Send Hex Value of Byte to UART
 43E                                     ;------------------------------------------------------------------------------------------
 43E                                     ;
 43E                                     ; Value provided in register 's4' is sent as ASCII HEX to the UART transmitter.
 43E                                     ;
 43E                                     ; Registers used s0, s4 (preserved) and s5.
 43E                                     ;
 43E  00540               send_hex_byte: LOAD s5, s4                                     ;isolate upper nibble
 43F  1450E                              SR0 s5
 440  1450E                              SR0 s5
 441  1450E                              SR0 s5
 442  1450E                              SR0 s5
 443  2044A                              CALL 44A[hex_to_ASCII]                          ; convert to ASCII
 444  20452                              CALL 452[UART_TX]                               ;send upper digit to UART
 445  00540                              LOAD s5, s4                                     ;isolate lower nibble
 446  0350F                              AND s5, 0F
 447  2044A                              CALL 44A[hex_to_ASCII]                          ; convert to ASCII
 448  20452                              CALL 452[UART_TX]                               ;send lower digit to UART
 449  25000                              RETURN 
 44A                                     ;
 44A                                     ; Convert value 00 to 0F provided in 's5' into ASCII character in 's5'
 44A                                     ;
 44A                                     ; Register used s5
 44A                                     ;
 44A  1950A                hex_to_ASCII: SUB s5, 0A                                      ;test if value is in range 0 to 9
 44B  3A44D                              JUMP C, 44D[number_char]
 44C  11507                              ADD s5, 07                                      ;ASCII char A to F in range 41 to 46
 44D  1153A                 number_char: ADD s5, 3A                                      ;ASCII char 0 to 9 in range 30 to 40
 44E  25000                              RETURN 
 44F                                     ;
 44F                                     ;
 44F                                     ;------------------------------------------------------------------------------------------
 44F                                     ; Include PSM files
 44F                                     ;------------------------------------------------------------------------------------------
 44F                                     ;
 44F                                     ; The INCLUDE directive enables commonly routines to be kept in their own PSM files and
 44F                                     ; easily reused in different programs (i.e. avoiding 'cut and paste'). It also allows
 44F                                     ; each PSM to remain a more manageable size.
 44F                                     ;
 44F                                     ;
 44F                                     ; Include routines that implement interface with UART macros.
 44F                                     ; -----------------------------------------------------------
 44F                                     ;
 44F                                     INCLUDE "C:\Users\dawid\Desktop\VHDL\uP\uart6_kc705\uart6_kc705.srcs\sources_1\new\uart_interface_routines.psm"["uart_interface_routines.psm"]
 44F                                     ;
 44F                                     ;------------------------------------------------------------------------------------------
 44F                                     ; Copyright © 2011-2012, Xilinx, Inc.
 44F                                     ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 44F                                     ; protected under U.S. and international copyright and other intellectual property laws.
 44F                                     ;------------------------------------------------------------------------------------------
 44F                                     ;
 44F                                     ; Disclaimer:
 44F                                     ; This disclaimer is not a license and does not grant any rights to the materials
 44F                                     ; distributed herewith. Except as otherwise provided in a valid license issued to
 44F                                     ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 44F                                     ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 44F                                     ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 44F                                     ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 44F                                     ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 44F                                     ; (whether in contract or tort, including negligence, or under any other theory
 44F                                     ; of liability) for any loss or damage of any kind or nature related to, arising
 44F                                     ; under or in connection with these materials, including for any direct, or any
 44F                                     ; indirect, special, incidental, or consequential loss or damage (including loss
 44F                                     ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 44F                                     ; of any action brought by a third party) even if such damage or loss was
 44F                                     ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 44F                                     ;
 44F                                     ; CRITICAL APPLICATIONS
 44F                                     ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 44F                                     ; application requiring fail-safe performance, such as life-support or safety
 44F                                     ; devices or systems, Class III medical devices, nuclear facilities, applications
 44F                                     ; related to the deployment of airbags, or any other applications that could lead
 44F                                     ; to death, personal injury, or severe property or environmental damage
 44F                                     ; (individually and collectively, "Critical Applications"). Customer assumes the
 44F                                     ; sole risk and liability of any use of Xilinx products in Critical Applications,
 44F                                     ; subject only to applicable laws and regulations governing limitations on product
 44F                                     ; liability.
 44F                                     ;
 44F                                     ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 44F                                     ;
 44F                                     ;------------------------------------------------------------------------------------------
 44F                                     ;
 44F                                     ;             _  ______ ____  ____  __  __  __
 44F                                     ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 44F                                     ;            | ' / |   | |_) \___ \| |\/| | '_ \
 44F                                     ;            | . \ |___|  __/ ___) | |  | | (_) )
 44F                                     ;            |_|\_\____|_|   |____/|_|  |_|\___/
 44F                                     ;
 44F                                     ;
 44F                                     ;                PicoBlaze Reference Design.
 44F                                     ;
 44F                                     ;
 44F                                     ; Ken Chapman - Xilinx Ltd
 44F                                     ;
 44F                                     ; 23rd April 2012 - Initial Release
 44F                                     ; 24th July 2012 - Corrections to comments only
 44F                                     ;
 44F                                     ; This file contains routines used to interface with the UART6 macros provided with KCPSM6
 44F                                     ; and was first supplied with a reference design called 'uart6_605' included in the
 44F                                     ; PicoBlaze package. The routines enable characters to be transmitted to and received
 44F                                     ; from the UART macros as well as perform a reset of the FIFO the buffers.
 44F                                     ;
 44F                                     ;     NOTE - This is not a standalone PSM file. The 'uart_control.psm' file supplied with
 44F                                     ;            the reference design stated above includes this file and calls the routines
 44F                                     ;            contained in this file.
 44F                                     ;
 44F                                     ;                INCLUDE "uart_interface_routines.psm"
 44F                                     ;
 44F                                     ;     Hint - The INCLUDE directive was introduced in KCPSM6 Assembler v2.00.
 44F                                     ;
 44F                                     ;
 44F                                     ; Whilst the reference design stated above was presented for the UART macros connected to
 44F                                     ; the USB/UART interface on the Xilinx ML605 Evaluation Kit this file can be ported to
 44F                                     ; any design for any board simply by setting the appropriate values in the CONSTANT
 44F                                     ; directives described below.
 44F                                     ;
 44F                                     ;
 44F                                     ;------------------------------------------------------------------------------------------
 44F                                     ; Hardware Constants
 44F                                     ;------------------------------------------------------------------------------------------
 44F                                     ;
 44F                                     ; The CONSTANT directives below define the input and output ports assigned to the UART
 44F                                     ; macros that implement a 115,200 baud rate communication with the USB/UART on the board.
 44F                                     ; Additional constants identify the allocation of signals to bits within a port.
 44F                                     ;
 44F                                     ;
 44F                                     ;
 44F                                     ; UART Status
 44F                                     ; -----------
 44F                                     ;
 44F                                     CONSTANT UART_status_port, 00                   ; Read status
 44F                                     CONSTANT UART_Tx_data_present, 00000001'b       ; Tx   data_present - bit0
 44F                                     CONSTANT UART_Tx_half_full, 00000010'b          ;         half_full - bit1
 44F                                     CONSTANT UART_Tx_full, 00000100'b               ;              full - bit2
 44F                                     CONSTANT UART_Rx_data_present, 00001000'b       ; Rx   data_present - bit3
 44F                                     CONSTANT UART_Rx_half_full, 00010000'b          ;         half_full - bit4
 44F                                     CONSTANT UART_Rx_full, 00100000'b               ;              full - bit5
 44F                                     ;
 44F                                     ; Write data to UART_TX6
 44F                                     ; ----------------------
 44F                                     ;
 44F                                     CONSTANT UART_TX6_output_port, 01
 44F                                     ;
 44F                                     ; Read data from UART_RX6
 44F                                     ; -----------------------
 44F                                     ;
 44F                                     CONSTANT UART_RX6_input_port, 01
 44F                                     ;
 44F                                     ; Reset UART buffers (Constant Optimised Port)
 44F                                     ; --------------------------------------------
 44F                                     ;
 44F                                     CONSTANT reset_UART_port, 01
 44F                                     CONSTANT UART_tx_reset, 00000001'b              ; uart_tx6 reset - bit0
 44F                                     CONSTANT UART_rx_reset, 00000010'b              ; uart_rx6 reset - bit1
 44F                                     CONSTANT UART_reset, 00000011'b                 ; reset Tx and Rx
 44F                                     CONSTANT UART_operate, 00000000'b               ; Tx and Rx free to operate
 44F                                     ;
 44F                                     ;
 44F                                     ;--------------------------------------------------------------------------------------
 44F                                     ; Routine to reset UART Buffers inside 'uart_tx6' and 'uart_rx6'
 44F                                     ;--------------------------------------------------------------------------------------
 44F                                     ;
 44F                                     ; This routine will generate and apply an active High reset pulse to  the FIFO
 44F                                     ; buffers in both the transmitter and receiver macros.
 44F                                     ;
 44F                                     ; Note that the reset signals have been assigned to a constant optimised output port
 44F                                     ; so the 'OUTPUTK' instructions are used and no registers contents are affected.
 44F                                     ;
 44F                                     ;
 44F  2B031           reset_UART_macros: OUTPUTK 03[UART_reset], 1[reset_UART_port]
 450  2B001                              OUTPUTK 00[UART_operate], 1[reset_UART_port]
 451  25000                              RETURN 
 452                                     ;
 452                                     ;
 452                                     ;--------------------------------------------------------------------------------------
 452                                     ; Routine to send one character to the UART Transmitter 'uart_tx6'
 452                                     ;--------------------------------------------------------------------------------------
 452                                     ;
 452                                     ; This routine will transmit the character provided in register 's5'.
 452                                     ;
 452                                     ; Before the character is output to the 'UART_TX6' macro the status of the FIFO buffer
 452                                     ; is checked to see if there is space. If the buffer is full then this routine will
 452                                     ; wait for space to become available (e.g. the time required for a previous character
 452                                     ; to be transmitted by the UART).
 452                                     ;
 452                                     ; Registers used s0 and s5 for the data (which is preserved)
 452                                     ;
 452  09000                     UART_TX: INPUT s0, 00[UART_status_port]                  ;Check if buffer is full
 453  0D004                              TEST s0, 04[UART_Tx_full]
 454  36452                              JUMP NZ, 452[UART_TX]                           ;wait if full
 455  2D501                              OUTPUT s5, 01[UART_TX6_output_port]
 456  25000                              RETURN 
 457                                     ;
 457                                     ;
 457                                     ;--------------------------------------------------------------------------------------
 457                                     ; Routine to attempt to receive one character from the UART Receiver 'uart_rx6'
 457                                     ;--------------------------------------------------------------------------------------
 457                                     ;
 457                                     ; This routine will attempt to receive one character from the 'UART_RX6' macro, and if
 457                                     ; successful, will return that character in register 's5' and the Zero flag will be
 457                                     ; reset (Z=0).
 457                                     ;
 457                                     ; If there are no characters available to be read from the FIFO buffer within the
 457                                     ; 'UART_RX6' macro then this routine will timeout after ~2,000 clock cycles (which is
 457                                     ; 40us at 50MHz) with the Zero flag set (Z=1). This timeout scheme ensures that KCPSM6
 457                                     ; cannot become stuck in this routine if no characters are received. If you do want
 457                                     ; KCPSM6 to wait indefinitely for a character to be received then either modify this
 457                                     ; routine or perform a test of the Zero flag and repeat the call to this routine as
 457                                     ; shown in this example...
 457                                     ;
 457                                     ;          wait_for_UART_RX: CALL UART_RX
 457                                     ;                            JUMP Z, wait_for_UART_RX
 457                                     ;
 457                                     ;
 457                                     ; Registers used s0, s1 and s5.
 457                                     ;
 457  011A7                     UART_RX: LOAD s1, A7[167'd]                              ;Timeout = 167 x (6 instructions x 2 clock cycles)
 458  09000                  rx_timeout: INPUT s0, 00[UART_status_port]
 459  0D008                              TEST s0, 08[UART_Rx_data_present]               ;Z=0 and C=1 when data present
 45A  3645E                              JUMP NZ, 45E[read_Rx]
 45B  19101                              SUB s1, 01[1'd]
 45C  31000                              RETURN Z                                        ;Timeout returns with Z=1 and C=0
 45D  22458                              JUMP 458[rx_timeout]
 45E                                     ;
 45E  09501                     read_Rx: INPUT s5, 01[UART_RX6_input_port]               ;read character from buffer
 45F  25000                              RETURN 
 460                                     ;
 460                                     ;
 460                                     ;------------------------------------------------------------------------------------------
 460                                     ; End of 'uart_interface_routines.psm"'
 460                                     ;------------------------------------------------------------------------------------------
 460                                     ;
 460                                     ;
 460                                     ;
 460                                     ;------------------------------------------------------------------------------------------
 460                                     ; End of Program
 460                                     ;------------------------------------------------------------------------------------------
 460                                     ;


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\dawid\Desktop\VHDL\uP\uart6_kc705\uart6_kc705.srcs\sources_1\new\auto_baud_rate_control.psm
C:\Users\dawid\Desktop\VHDL\uP\uart6_kc705\uart6_kc705.srcs\sources_1\new\uart_interface_routines.psm



List of defined constants

 CONSTANT name               Value        Source PSM File

 timestamp_hours             14'd         
 timestamp_minutes           19'd         
 timestamp_seconds           50'd         
 datestamp_year              22'd         
 datestamp_month             1'd          
 datestamp_day               22'd         
 NUL                         00           
 BEL                         07           
 BS                          08           
 HT                          09           
 LF                          0A           
 VT                          0B           
 CR                          0D           
 ESC                         1B           
 DEL                         7F           
 DCS                         90           
 ST                          9C           
 clock_frequency_in_MHz_port 02           auto_baud_rate_control.psm
 set_baud_rate_port          02           auto_baud_rate_control.psm
 1us_delay_count             3D           auto_baud_rate_control.psm
 1ms_delay_count0            3E           auto_baud_rate_control.psm
 1ms_delay_count1            3F           auto_baud_rate_control.psm
 UART_status_port            00           uart_interface_routines.psm
 UART_Tx_data_present        00000001'b   uart_interface_routines.psm
 UART_Tx_half_full           00000010'b   uart_interface_routines.psm
 UART_Tx_full                00000100'b   uart_interface_routines.psm
 UART_Rx_data_present        00001000'b   uart_interface_routines.psm
 UART_Rx_half_full           00010000'b   uart_interface_routines.psm
 UART_Rx_full                00100000'b   uart_interface_routines.psm
 UART_TX6_output_port        01           uart_interface_routines.psm
 UART_RX6_input_port         01           uart_interface_routines.psm
 reset_UART_port             01           uart_interface_routines.psm
 UART_tx_reset               00000001'b   uart_interface_routines.psm
 UART_rx_reset               00000010'b   uart_interface_routines.psm
 UART_reset                  00000011'b   uart_interface_routines.psm
 UART_operate                00000000'b   uart_interface_routines.psm



No TABLEs defined



List of text strings

 STRING name               String                                                        Source PSM File

 KCPSM6_version$           "v2.70"                                                       
 datestamp$                "22 Jan 2022"                                                 
 timestamp$                "14:19:50"                                                    
 BAUD_introduction$        " Calculation of values used to define the BAUD rate"         auto_baud_rate_control.psm
 BAUD_clock_frequency1$    " Declared clock frequency (MHz) = "                          auto_baud_rate_control.psm
 BAUD_clock_frequency2$    " Converted clock frequency (Hz) = "                          auto_baud_rate_control.psm
 BAUD_set$                 "          'set_baud_rate' value = "                          auto_baud_rate_control.psm
 DELAY_introduction$       " Calculation of software delay values"                       auto_baud_rate_control.psm
 DELAY_clock_frequency$    " Declared clock frequency (MHz) = "                          auto_baud_rate_control.psm
 DELAY_1us_clock_cycles$   "     Clock cycles for 1us delay = "                          auto_baud_rate_control.psm
 DELAY_set_1us$            "        '1us_delay_count' value = "                          auto_baud_rate_control.psm
 DELAY_1ms_clock_cycles$   "     Clock cycles for 1ms delay = "                          auto_baud_rate_control.psm
 DELAY_set_1ms$            "        '1ms_delay_count' value = "                          auto_baud_rate_control.psm
 TIMER_introduction$       " Simple timer using the 1ms software delay loop"             auto_baud_rate_control.psm
 TIMER_start$              " Press 'S' key to start timer"                               auto_baud_rate_control.psm
 TIMER_stop$               " (Press 'R' key to stop/reset timer)"                        auto_baud_rate_control.psm
 banner1$                  "  _  ______ ____  ____  __  __  __"                          auto_baud_rate_control.psm
 banner2$                  " | |/ / ___|  _ \/ ___||  \/  |/ /_"                         auto_baud_rate_control.psm
 banner3$                  " | ' / |   | |_) \___ \| |\/| | '_ \"                        auto_baud_rate_control.psm
 banner4$                  " | . \ |___|  __/ ___) | |  | | (_) )"                       auto_baud_rate_control.psm
 banner5$                  " |_|\_\____|_|   |____/|_|  |_|\___/"                        auto_baud_rate_control.psm
 welcome1$                 "Automatic BAUD Rate Control and Software Delay Loop Tuning"  auto_baud_rate_control.psm
 welcome2$                 "Assembly Date: "                                             auto_baud_rate_control.psm
 welcome3$                 "   Time: "                                                   auto_baud_rate_control.psm
 welcome4$                 "Assembler Version: "                                         auto_baud_rate_control.psm
 welcome5$                 "Hardware Design: "                                           auto_baud_rate_control.psm



List of line labels

   Label                        Addr  Source PSM File

   cold_start                   004   auto_baud_rate_control.psm
   clock_to_Hz_loop             009   auto_baud_rate_control.psm
   set_baud_rate_loop           010   auto_baud_rate_control.psm
   clock_freq_loop              025   auto_baud_rate_control.psm
   baud_rate_loop               038   auto_baud_rate_control.psm
   BAUD_intro_msg               045   auto_baud_rate_control.psm
   BAUD_clock_frequency2_msg    09F   auto_baud_rate_control.psm
   BAUD_set_msg                 0C2   auto_baud_rate_control.psm
 * delay_1us                    0E5   auto_baud_rate_control.psm
   delay_1us_loop               0E6   auto_baud_rate_control.psm
   delay_1ms                    0E9   auto_baud_rate_control.psm
   delay_1ms_loop               0EB   auto_baud_rate_control.psm
   delay_1s                     0EF   auto_baud_rate_control.psm
   1s_delay                     0F1   auto_baud_rate_control.psm
   define_soft_delays           0F6   auto_baud_rate_control.psm
   calc_1us_delay_count         10A   auto_baud_rate_control.psm
   1us_divide_loop              10D   auto_baud_rate_control.psm
   store_1us_delay_count        110   auto_baud_rate_control.psm
   1ms_cycle_count_loop         116   auto_baud_rate_control.psm
   1ms_divide_loop              12D   auto_baud_rate_control.psm
   DELAY_intro_msg              13B   auto_baud_rate_control.psm
   DELAY_1us_clock_cycles_msg   187   auto_baud_rate_control.psm
   DELAY_set_1us_msg            1AA   auto_baud_rate_control.psm
   DELAY_1ms_clock_cycles_msg   1CD   auto_baud_rate_control.psm
   DELAY_set_1ms_msg            1F0   auto_baud_rate_control.psm
   main                         213   auto_baud_rate_control.psm
   wait_for_start               216   auto_baud_rate_control.psm
   start_timer                  21C   auto_baud_rate_control.psm
   timer_running                223   auto_baud_rate_control.psm
   test_for_stop                230   auto_baud_rate_control.psm
   increment_timer              239   auto_baud_rate_control.psm
   TIMER_start_msg              24A   auto_baud_rate_control.psm
   TIMER_stop_msg               29D   auto_baud_rate_control.psm
   clear_screen                 2C6   auto_baud_rate_control.psm
 * cursor_home                  2CF   auto_baud_rate_control.psm
   welcome_message              2D6   auto_baud_rate_control.psm
   welcome_msg                  2DD   auto_baud_rate_control.psm
   send_message                 428   auto_baud_rate_control.psm
   send_CR                      42F   auto_baud_rate_control.psm
   send_Hex_CR                  431   auto_baud_rate_control.psm
   send_space                   43A   auto_baud_rate_control.psm
   send_decimal_digit           43C   auto_baud_rate_control.psm
   send_hex_byte                43E   auto_baud_rate_control.psm
   hex_to_ASCII                 44A   auto_baud_rate_control.psm
   number_char                  44D   auto_baud_rate_control.psm
   reset_UART_macros            44F   uart_interface_routines.psm
   UART_TX                      452   uart_interface_routines.psm
   UART_RX                      457   uart_interface_routines.psm
   rx_timeout                   458   uart_interface_routines.psm
   read_Rx                      45E   uart_interface_routines.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             84
 STAR              -

 AND               1
 OR                -
 XOR               -

 ADD              15
 ADDCY            10
 SUB              14
 SUBCY            12

 TEST              3
 TESTCY            -
 COMPARE          10
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               4
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             8
 OUTPUT            2
 OUTPUTK           2

 STORE             3
 FETCH             3

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             39
 JUMP@             -
 CALL             64
 CALL@             1
 RETURN           13
 LOAD&RETURN     831

 HWBUILD           1



End of KCPSM6 log file.
